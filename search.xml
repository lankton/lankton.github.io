<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[【Android】自定义LinearLayout实现侧滑布局--SwipeLinearLayout]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89LinearLayout%E5%AE%9E%E7%8E%B0%E4%BE%A7%E6%BB%91%E5%B8%83%E5%B1%80-SwipeLinearLayout/</url>
      <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>这周做了一个自定义侧滑布局， 继承自LinearLayout。<br>代码地址：<a href="https://github.com/lankton/android-SwipeLinearLayout" target="_blank" rel="external">android-SwipeLinearLayout</a></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>可以单独使用，也可以在ListView等可滑动的父组件中使用。以在ListView中使用为demo:<br><img src="http://img.blog.csdn.net/20160525015953736" width="260px"><br>解决了item和ListView的滑动冲突， 同时每个item及其上面的控件可以正常点击。</p>
<p>代码比较简单，就不上传到JCenter了。 控件本身就只有一个文件: <a href="https://github.com/lankton/android-SwipeLinearLayout/blob/master/app/src/main/java/cn/lankton/swipelinearlayout/lib/SwipeLinearLayout.java" target="_blank" rel="external">SwipeLinearLayout.java</a>, 有需要可以直接复制或者修改。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>和普通LinearLayout一样使用，内部包含2个子元素即可。<br>示例:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xx.SwipeLinearLayout</span></span></div><div class="line">  <span class="attr">xxxx</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout-width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">xxxx</span></div><div class="line">    <span class="attr">xxxx</span>&gt;</div><div class="line">    ... ...</div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout-width</span>=<span class="string">"30dp"</span></div><div class="line">    <span class="attr">xxxx</span>&gt;</div><div class="line">    ... ...</div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xx.SwipeLinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第一个子元素是未侧滑时就显示的部分， 第二个子元素是会被侧滑出来的部分。<br><strong>SwipeLinearLayout的orientation随便设置，反正都会当成horizontal处理。 </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwipeLinearLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwipeLinearLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwipeLinearLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    mScroller = <span class="keyword">new</span> Scroller(context);</div><div class="line">    <span class="keyword">this</span>.setOrientation(HORIZONTAL);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="如何进行滑动"><a href="#如何进行滑动" class="headerlink" title="如何进行滑动"></a>如何进行滑动</h3><p>这个问题思路很简单。滑动分为2个阶段， 一个阶段就是跟手滑动，另外一个阶段，就是当手指离开后，布局继续滑动。<br>跟手滑动，那么我们很容易就想到重写onTouchEvent方法，在ACTION_MOVE事件中实现。那手指离开之后呢？首先要明确一点，开始处理的判断，是放在ACTION_UP事件中的。我们可以通过此时布局展开的程度，决定布局是要完全展开，还是缩回初始状态。为了让这种自动的滚动显得自然，我们需要借助Scroller。<br>Scroller可以看作一种类似插值器一样的东西，可以在系统调用的回调中，为我们提供一个起、终值之间的值。随着时间的增长，这个值逐渐从起点值变成终点值。通过这个值随时间的变化，可以帮助我们实现布局的平滑滚动。<br>处理滑动的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</div><div class="line">            lastX = event.getX();</div><div class="line">            lastY = event.getY();</div><div class="line">            startScrollX = getScrollX();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            <span class="keyword">if</span> (ignore) &#123;</div><div class="line">                ignore = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">float</span> curX = event.getX();</div><div class="line">            <span class="keyword">float</span> dX = curX - lastX;</div><div class="line">            lastX = curX;</div><div class="line">            <span class="keyword">if</span> (hasJudged) &#123;</div><div class="line">                <span class="keyword">int</span> targetScrollX = getScrollX() + (<span class="keyword">int</span>)(-dX);</div><div class="line">                <span class="keyword">if</span> (targetScrollX &gt; width_right) &#123;</div><div class="line">                    scrollTo(width_right, <span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetScrollX &lt; <span class="number">0</span>) &#123;</div><div class="line">                    scrollTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    scrollTo(targetScrollX, <span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            <span class="keyword">float</span> finalX = event.getX();</div><div class="line">            <span class="keyword">if</span> (finalX &lt; startX) &#123;</div><div class="line">                scrollAuto(DIRECTION_EXPAND);</div><div class="line">            &#125;  <span class="keyword">else</span> &#123;</div><div class="line">                scrollAuto(DIRECTION_SHRINK);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自动滚动， 变为展开或收缩状态</div><div class="line"> * <span class="doctag">@param</span> direction</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollAuto</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> curScrollX = getScrollX();</div><div class="line">    <span class="keyword">if</span> (direction == DIRECTION_EXPAND) &#123;</div><div class="line">        <span class="comment">// 展开</span></div><div class="line">        mScroller.startScroll(curScrollX, <span class="number">0</span>, width_right - curScrollX, <span class="number">0</span>, <span class="number">300</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 缩回</span></div><div class="line">        mScroller.startScroll(curScrollX, <span class="number">0</span>, -curScrollX, <span class="number">0</span>, <span class="number">300</span>);</div><div class="line">    &#125;</div><div class="line">    invalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.computeScroll();</div><div class="line">    <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</div><div class="line">        <span class="keyword">this</span>.scrollTo(mScroller.getCurrX(), <span class="number">0</span>);</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到我们就是在computeScroll()方法中，获得插值，进行滚动的。要注意的是，一定要调用invalidate()，computeScroll() 才会被调用。<br>关于hasJudged和ingnore标志位， 这两个是跟处理滑动冲突相关的。hasJudged标志位表示: 当前手指滑动的方向(水平or竖直)是否已经判断出，ignore表示是否要忽略这次被传到onTouchEvent里的事件。<br>我们继续往下看。</p>
<h3 id="处理滑动冲突"><a href="#处理滑动冲突" class="headerlink" title="处理滑动冲突"></a>处理滑动冲突</h3><p>处理滑动冲突的目的是，保证布局的左右滑动，和它父组件，如ListView等的竖直滑动，不会相互影响。如果仅仅像上文一样，只实现了onTouchEvent， 那么单独使用该布局，倒是没什么问题。但在ListView的item中使用的时候，你会发现，在你想划开子item的时候，很容易就引起了ListView的上下滑动。而且之后的所有事件， 都会被ListView拦截。这就很尴尬了，SwipeLinearLayout刚被划开一点就不动了。而且这种情况出现的非常频繁，滑动冲突必须处理，即：<br><strong>touch事件被谁处理，必须由我们说了算。</strong><br>本次处理滑动冲突，我采用的是内部拦截法。即，在子View的dispatchTouchEvent中，先使用父View的requestDisallowInterceptTouchEvent(true)，阻止父View对后续事件进行拦截。然后再通过后续条件判断，是否让父View恢复拦截事件的能力。<br>在本例中，我们通过比较手指在水平方向和竖直方向移动距离的大小，判断是否调用requestDisallowInterceptTouchEvent(false)恢复父View拦截能力。为了判断更合理， 比较放在了手指移动超过一定距离的时候。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (ev.getActionMasked()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            disallowParentsInterceptTouchEvent(getParent());</div><div class="line">            hasJudged = <span class="keyword">false</span>;</div><div class="line">            startX = ev.getX();</div><div class="line">            startY = ev.getY();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            <span class="keyword">float</span> curX = ev.getX();</div><div class="line">            <span class="keyword">float</span> curY = ev.getY();</div><div class="line">            <span class="keyword">if</span> (hasJudged == <span class="keyword">false</span>) &#123;</div><div class="line">                <span class="keyword">float</span> dx = curX - startX;</div><div class="line">                <span class="keyword">float</span> dy = curY - startY;</div><div class="line">                <span class="keyword">if</span> ((dx * dx + dy * dy &gt; MOVE_JUDGE_DISTANCE * MOVE_JUDGE_DISTANCE)) &#123;</div><div class="line">                    <span class="keyword">if</span> (Math.abs(dy) &gt; Math.abs(dx)) &#123;</div><div class="line">                        allowParentsInterceptTouchEvent(getParent());</div><div class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != onSwipeListener) &#123;</div><div class="line">                            onSwipeListener.onDirectionJudged(<span class="keyword">this</span>, <span class="keyword">false</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != onSwipeListener) &#123;</div><div class="line">                            onSwipeListener.onDirectionJudged(<span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">                        &#125;</div><div class="line">                        lastX = curX;</div><div class="line">                        lastY = curY;</div><div class="line">                    &#125;</div><div class="line">                    hasJudged = <span class="keyword">true</span>;</div><div class="line">                    ignore = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hasJudged， 很好理解，表示:当前手指滑动的方向(水平or竖直)是否已经判断出。那ignore呢，又是什么鬼？<br>是这样的：当我们判断手指其实是竖直方向滑动的时候，会恢复父View(如ListView)的拦截能力，那后续的滑动，其实都只是ListView的上下滑动了。这个，大家应该都能理解。但大家要注意一点，决定滑动方向的，最后一次ACTION_MOVE事件，依然被传到onTouchEvent里去了。这就会造成，虽然结果判定是对ListView进行上下滑动，但我们依然可以看见，相应的item的SwipeLinearLayout被划出来了一点。这就很难看了。于是我增加了一个ignore标志位，来表示，忽略这次的事件。即：<strong>用来决定方向的手指滑动，就只是用来决定方向的，而不会对UI产生任何影响。</strong></p>
<p>你也可能发现，这里并没有直接调用parent的requestDisallowInterceptTouchEvent方法，而是调用了自定义的方法disallowParentsInterceptTouchEvent以及allowParentsInterceptTouchEvent。<br>看一下这两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">disallowParentsInterceptTouchEvent</span><span class="params">(ViewParent parent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == parent) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">    disallowParentsInterceptTouchEvent(parent.getParent());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allowParentsInterceptTouchEvent</span><span class="params">(ViewParent parent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == parent) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    parent.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</div><div class="line">    allowParentsInterceptTouchEvent(parent.getParent());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用了递归，原因很简单：你想阻止或者恢复拦截的，并不一定是SwipeLinearLayout的直接父组件。举个例子，SwipeLinearLayout可能只是你的item布局的一个子布局， 那它的父布局就不是ListView。我们要阻止ListView，就只能通过递归的方式，向上搜索，然后调用requestDisallowInterceptTouchEvent(false)。</p>
<h3 id="处理点击事件"><a href="#处理点击事件" class="headerlink" title="处理点击事件"></a>处理点击事件</h3><p>一个View被设置了OnClickListener，其onClick方法其实是在OnTouchEvent的ACTION_UP中调用的。所以SwipeLinearLayout的子控件，如果想点击事件生效，就必须得到事件。而为了保证SwipeLinearLayout的滑动，SwipeLinearLayout的又必须对事件进行拦截。所以，可以重写SwipeLinearLayout的处理拦截方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hasJudged) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 应该很好理解，当判定了滑动方向的时候(其实就是水平方向， 如果是竖直方向的话，直接就被上层拦截了，到不了这里)，返回true， 自己消费touch事件，没判定的话，就返回父类，即LinearLayout的onInterceptTouchEvent。LinearLayou的子控件可以点击吗？当然可以。所以这样写就ok了。<br>看到的效果如示例动图：<br>拖动左边白色部分的时候，虽然手指一直在上面，也是从上面离开的，但依然不会出发click事件。但直接点击的话，则会弹出Toast，提示点击了item。</p>
<h3 id="ListView中item的联动"><a href="#ListView中item的联动" class="headerlink" title="ListView中item的联动"></a>ListView中item的联动</h3><p>这个描述，说的其实就是图片里显示的，竖直滑动ListView，或者滑动其他的item， 已经展开的item会复原。<br>这个重点其实不在SwipeLinearLayout上了，具体的逻辑是在与ListView对应的Adapter上。<br>SwipeLinearLayout中提供了这样一个interface:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnSwipeListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 手指滑动方向明确了</div><div class="line">     * <span class="doctag">@param</span> sll  拖动的SwipeLinearLayout</div><div class="line">     * <span class="doctag">@param</span> isHorizontal 滑动方向是否为水平</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDirectionJudged</span><span class="params">(SwipeLinearLayout sll, <span class="keyword">boolean</span> isHorizontal)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>onDirectionJudged， 在hasJudged被置为true的时候被调用。在上面的代码中也可以看到。<br>下面看Adapter中是如何实现这个接口的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectionJudged</span><span class="params">(SwipeLinearLayout thisSll, <span class="keyword">boolean</span> isHorizontal)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> == isHorizontal) &#123;</div><div class="line">        <span class="keyword">for</span> (SwipeLinearLayout sll : swipeLinearLayouts) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == sll) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            sll.scrollAuto(SwipeLinearLayout.DIRECTION_SHRINK);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (SwipeLinearLayout sll : swipeLinearLayouts) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == sll) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!sll.equals(thisSll)) &#123;</div><div class="line">                <span class="comment">//划开一个sll， 其他收缩</span></div><div class="line">                sll.scrollAuto(SwipeLinearLayout.DIRECTION_SHRINK);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>swipeLinearLayouts是Adapter中定义的，一个保存ListView中所有item里的SwipeLinearLayout的列表(由于convertView的复用，其实这个列表的长度是很有限的，不用担心内存等问题)。<br>看了代码， 实现的逻辑就很清楚了：<br>竖直方向，直接缩起所有SwipeLinearLayout， 否则，把不是当前滑动的SwipeLinearLayout全部缩起来。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果只是考虑横向滚动，那么问题就非常简单，只需要重写OnTouchEvent，这点大家肯定都会，我也没必要写这篇博客了。然而为了处理滑动冲突(包括保证子View的点击)，我们将dispatchTouchEvent和onInterceptTouchEvent也都重写了。一个是保证自己在滑动的时候，事件不会被上层粗暴拦截，另一个是保证自己在不滑动的时候，事件能够传给内部的子控件。</p>
<p>代码只贴了重点部分， 但其实也差不多了，毕竟代码量也不是很大，重点就在于对于事件的分发与拦截。如果需要查看项目及demo完整代码，可以访问：<br><a href="https://github.com/lankton/android-SwipeLinearLayout" target="_blank" rel="external">android-SwipeLinearLayout</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】自定义FlowLayout，支持多种布局优化--android-flowlayout]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89FlowLayout%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96-android-flowlayout/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>flow layout， 流式布局， 这个概念在移动端或者前端开发中很常见，特别是在多标签的展示中， 往往起到了关键的作用。然而Android 官方， 并没有为开发者提供这样一个布局， 于是有很多开发者自己做了这样的工作，github上也出现了很多自定义FlowLayout。 最近， 我也实现了这样一个FlowLayout，自己感觉可能是当前最好用的FlowLayout了（捂脸），在这里做一下分享。<br>项目地址：<a href="https://github.com/lankton/android-flowlayout" target="_blank" rel="external">https://github.com/lankton/android-flowlayout</a></p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p><img src="http://img.blog.csdn.net/20160421000717399" width="250px"> <img src="http://img.blog.csdn.net/20160421000756789" width="250px"> <img src="http://img.blog.csdn.net/20160421001353635" width="250px"><br>第一张图， 展示<strong>向FlowLayout中不断添加子View</strong><br>第二张图， 展示<strong>压缩子View， 使他们尽可能充分利用空间</strong><br>第三张图， 展示<strong>调整子View之间间隔， 使各行左右对齐</strong></p>
<p> <img src="http://img.blog.csdn.net/20160520234814688" width="250px"><br> 这张图，截断flowlayout到指定行数。－－20160520更新。</p>
<p> ##基本的流式布局功能##<br>在布局文件中使用FlowLayout即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">cn.lankton.flowlayout.FlowLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/flowlayout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">app:lineSpacing</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#F0F0F0"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">cn.lankton.flowlayout.FlowLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到， 提供了一个自定义参数<strong>lineSpacing</strong>， 来控制行与行之间的间距。</p>
<h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flowLayout.relayoutToCompress();</div></pre></td></tr></table></figure>
<p>压缩的方式， 是通过对子View重新排序， 使得它们能够更合理的挤占空间， 后面会做详细说明。</p>
<h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flowLayout.relayoutToAlign();</div></pre></td></tr></table></figure>
<p>对齐， 不会改变子View的顺序， 也不会起到压缩的作用。</p>
<h2 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flowLayout.specifyLines(<span class="keyword">int</span>)</div></pre></td></tr></table></figure>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="流式布局的实现"><a href="#流式布局的实现" class="headerlink" title="流式布局的实现"></a>流式布局的实现</h2><h3 id="重写generateLayoutParams方法"><a href="#重写generateLayoutParams方法" class="headerlink" title="重写generateLayoutParams方法"></a>重写generateLayoutParams方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(LayoutParams p)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MarginLayoutParams(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(AttributeSet attrs)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MarginLayoutParams(getContext(), attrs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重写该方法的2种重载是有必要的。这样子元素的LayoutParams就是MarginLayoutParam， 包含了margin 属性， 正是我们需要的。</p>
<h3 id="重写onMeasure"><a href="#重写onMeasure" class="headerlink" title="重写onMeasure"></a>重写onMeasure</h3><p>主要有2个目的， 第一是测量每个子元素的宽高， 第二是根据子元素的测量值， 设置的FlowLayout的测量值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mPaddingLeft = getPaddingLeft();</div><div class="line">    <span class="keyword">int</span> mPaddingRight = getPaddingRight();</div><div class="line">    <span class="keyword">int</span> mPaddingTop = getPaddingTop();</div><div class="line">    <span class="keyword">int</span> mPaddingBottom = getPaddingBottom();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> lineUsed = mPaddingLeft + mPaddingRight;</div><div class="line">    <span class="keyword">int</span> lineY = mPaddingTop;</div><div class="line">    <span class="keyword">int</span> lineHeight = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getChildCount(); i++) &#123;</div><div class="line">        View child = <span class="keyword">this</span>.getChildAt(i);</div><div class="line">        <span class="keyword">if</span> (child.getVisibility() == GONE) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        measureChildWithMargins(child, widthMeasureSpec, <span class="number">0</span>, heightMeasureSpec, lineY);</div><div class="line">        MarginLayoutParams mlp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">        <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line">        <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">        <span class="keyword">int</span> spaceWidth = mlp.leftMargin + childWidth + mlp.rightMargin;</div><div class="line">        <span class="keyword">int</span> spaceHeight = mlp.topMargin + childHeight + mlp.bottomMargin;</div><div class="line">        <span class="keyword">if</span> (lineUsed + spaceWidth &gt; widthSize) &#123;</div><div class="line">            <span class="comment">//approach the limit of width and move to next line</span></div><div class="line">            lineY += lineHeight + lineSpacing;</div><div class="line">            lineUsed = mPaddingLeft + mPaddingRight;</div><div class="line">            lineHeight = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (spaceHeight &gt; lineHeight) &#123;</div><div class="line">            lineHeight = spaceHeight;</div><div class="line">        &#125;</div><div class="line">        lineUsed += spaceWidth;</div><div class="line">    &#125;</div><div class="line">    setMeasuredDimension(</div><div class="line">            widthSize,</div><div class="line">            heightMode == MeasureSpec.EXACTLY ? heightSize : lineY + lineHeight + mPaddingBottom</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码逻辑很简单， 就是遍历子元素， 计算累计长度， 超过一行可容纳宽度， 就将累计长度清0，同时假设继续向下一行放置子元素。为什么是假设呢， 因为真正在FlowLayout中放置子元素的过程， 是在onLayout方法中的。<br>重点在最后的setMeasuredDimension方法。在日常使用FlowLayout中， 我们的宽度往往是固定值， 或者match_parent,  不需要根据内容而改变， 所以宽度值直接用widthSize， 即从传进来的测量值获得的宽度。<br>高度则根据MeasureSpec的mode来判断， EXACTLY意味着和宽度一样， 直接用测量值的宽度即可， 否则，则是wrap_content， 需要用子元素排布出来的高度进行判断。</p>
<h3 id="重写onLayout"><a href="#重写onLayout" class="headerlink" title="重写onLayout"></a>重写onLayout</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mPaddingLeft = getPaddingLeft();</div><div class="line">    <span class="keyword">int</span> mPaddingRight = getPaddingRight();</div><div class="line">    <span class="keyword">int</span> mPaddingTop = getPaddingTop();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lineX = mPaddingLeft;</div><div class="line">    <span class="keyword">int</span> lineY = mPaddingTop;</div><div class="line">    <span class="keyword">int</span> lineWidth = r - l;</div><div class="line">    usefulWidth = lineWidth - mPaddingLeft - mPaddingRight;</div><div class="line">    <span class="keyword">int</span> lineUsed = mPaddingLeft + mPaddingRight;</div><div class="line">    <span class="keyword">int</span> lineHeight = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getChildCount(); i++) &#123;</div><div class="line">        View child = <span class="keyword">this</span>.getChildAt(i);</div><div class="line">        <span class="keyword">if</span> (child.getVisibility() == GONE) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        MarginLayoutParams mlp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">        <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line">        <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">        <span class="keyword">int</span> spaceWidth = mlp.leftMargin + childWidth + mlp.rightMargin;</div><div class="line">        <span class="keyword">int</span> spaceHeight = mlp.topMargin + childHeight + mlp.bottomMargin;</div><div class="line">        <span class="keyword">if</span> (lineUsed + spaceWidth &gt; lineWidth) &#123;</div><div class="line">            <span class="comment">//approach the limit of width and move to next line</span></div><div class="line">            lineY += lineHeight + lineSpacing;</div><div class="line">            lineUsed = mPaddingLeft + mPaddingRight;</div><div class="line">            lineX = mPaddingLeft;</div><div class="line">            lineHeight = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        child.layout(lineX + mlp.leftMargin, lineY + mlp.topMargin, lineX + mlp.leftMargin + childWidth, lineY + mlp.topMargin + childHeight);</div><div class="line">        <span class="keyword">if</span> (spaceHeight &gt; lineHeight) &#123;</div><div class="line">            lineHeight = spaceHeight;</div><div class="line">        &#125;</div><div class="line">        lineUsed += spaceWidth;</div><div class="line">        lineX += spaceWidth;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码也很好理解， 逐个判断子元素，是继续在本行放置， 还是需要换行放置。这一步和onMeasure一样， 基本上所有的FlowLayout都会进行重写， 我的自然也没什么特别的新意， 这两块就不重点介绍了。下面重点介绍一下2种布局优化的实现。</p>
<h2 id="压缩的实现"><a href="#压缩的实现" class="headerlink" title="压缩的实现"></a>压缩的实现</h2><p>关于如何实现压缩， 这个问题开始的确很让我头疼。因为我的脑子里只有大致的概念，那就是压缩应该是一个什么样的效果， 而这个模糊的概念很难转换成具体的数学模型。没有数学模型， 就无法用代码解决这个问题，简直恨不得回到大学重学算法。。但有一个想法是明确的， 那就是解决这个问题， 实际上就是对子元素的重新排序。<br>后来决定简化思路， 用类似贪心算法的思维解决问题，那就是：逐行解决， 每一行都争取最大程度的占满。</p>
<ol>
<li>从第一行开始， 从子元素集合中，选出一部分， 使得这一部分子元素可以最大程度的占据这一行;</li>
<li>将这部分已经选出的从集合中拿出， 继续对下一行执行第一步操作。<br>这个思路确立了， 那我们如何从集合中选出子集， 对某一行进行最大程度的占据呢？<br>我们已知的条件：</li>
<li>子元素集合</li>
<li>每行可容纳宽度</li>
<li>每个子元素的宽度<br>这个时候， 脑子里就想到了01背包问题：<br>已知</li>
<li>物品集合</li>
<li>背包总容量</li>
<li>每个物品的价值</li>
<li>每个物品的体积<br>求背包包含物品的最大价值(及其方案<br>有朋友可能有疑问， 二者确实很像， 但不是还差着一个条件吗？嗯 ，是的。。但是<strong>在当前状况下，因为我们要尽可能的占满某一行， 那么每个子元素的宽度就不仅仅是限制了， 也是价值所在。</strong><br>这样， 该状况就完全和01背包问题一致了。之后就可以用<strong>动态规划</strong>解决问题了。 关于如何用动态规划解决01背包问题， 其实我也忘的差不多了， 也是在网上查着资料， 一边回顾，一边实现的。所以这里我自己就不展开介绍了， 也不贴自己的代码了（感兴趣的可以去<a href="https://githitub.com/lankton/android-flowlayout" target="_blank" rel="external">github</a>查看）， 放一个链接。我感觉这个链接里的讲解对我回顾相关知识点帮助很大，有兴趣的也可以看看～<br><a href="http://blog.csdn.net/wumuzi520/article/details/7014559" target="_blank" rel="external"> 背包问题——“01背包”详解及实现（包含背包中具体物品的求解）</a></li>
</ol>
<h2 id="对齐的实现"><a href="#对齐的实现" class="headerlink" title="对齐的实现"></a>对齐的实现</h2><p>这个功能，我最早是在bilibili的ipad客户端上看到的，如下。<br><img src="http://img.blog.csdn.net/20160421021509145" width="250px"><br>当时觉得挺好看的，还想过一阵怎么做， 但一时没想出来。。。这次实现FlowLayout， 就顺手将这种对齐样式用自己的想法实现了一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relayoutToAlign</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> childCount = <span class="keyword">this</span>.getChildCount();</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == childCount) &#123;</div><div class="line">        <span class="comment">//no need to sort if flowlayout has no child view</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">        View v = getChildAt(i);</div><div class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> BlankView) &#123;</div><div class="line">            <span class="comment">//BlankView is just to make childs look in alignment, we should ignore them when we relayout</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    View[] childs = <span class="keyword">new</span> View[count];</div><div class="line">    <span class="keyword">int</span>[] spaces = <span class="keyword">new</span> <span class="keyword">int</span>[count];</div><div class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">        View v = getChildAt(i);</div><div class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> BlankView) &#123;</div><div class="line">            <span class="comment">//BlankView is just to make childs look in alignment, we should ignore them when we relayout</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        childs[n] = v;</div><div class="line">        MarginLayoutParams mlp = (MarginLayoutParams) v.getLayoutParams();</div><div class="line">        <span class="keyword">int</span> childWidth = v.getMeasuredWidth();</div><div class="line">        spaces[n] = mlp.leftMargin + childWidth + mlp.rightMargin;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> lineTotal = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.removeAllViews();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (lineTotal + spaces[i] &gt; usefulWidth) &#123;</div><div class="line">            <span class="keyword">int</span> blankWidth = usefulWidth - lineTotal;</div><div class="line">            <span class="keyword">int</span> end = i - <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> blankCount = end - start;</div><div class="line">            <span class="keyword">if</span> (blankCount &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> eachBlankWidth = blankWidth / blankCount;</div><div class="line">                MarginLayoutParams lp = <span class="keyword">new</span> MarginLayoutParams(eachBlankWidth, <span class="number">0</span>);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; end; j++) &#123;</div><div class="line">                    <span class="keyword">this</span>.addView(childs[j]);</div><div class="line">                    BlankView blank = <span class="keyword">new</span> BlankView(mContext);</div><div class="line">                    <span class="keyword">this</span>.addView(blank, lp);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.addView(childs[end]);</div><div class="line">                start = i;</div><div class="line">                i --;</div><div class="line">                lineTotal = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lineTotal += spaces[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">this</span>.addView(childs[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码很长， 但说起来很简单。获得子元素列表，从头开始， 逐一判断哪些子元素在同一行。即每一次的start 到 end。 然后计算这些子元素装满一行的话， 还差多少， 设为d。则每两个子元素之间需要补上的间距为 d / (end - start)。 如果设置间距呢， 首先我们肯定不能去更改子元素本身的性质。那么， 就只能在两个子元素中间补上一个宽度为d / (end - start) 的BlankView了。<br>至于这个BlankView是个什么鬼， 定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlankView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlankView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你看， 根本什么也没做。 那我新写一个类继承View的意义是什么呢？ 其实从上边对齐的代码里也能看到，这样我们<strong>在遍历FlowLayout的子元素时， 就可以通过 instance of BlankView 来判断是真正需要处理、计算的子元素，还是我们后来加上的补位View了</strong>。 </p>
<h2 id="截断的实现"><a href="#截断的实现" class="headerlink" title="截断的实现"></a>截断的实现</h2><p>假设要截断为N行， 则取子元素列表中，前N行的，重新布局。详见<a href="https://github.com/lankton/android-flowlayout" target="_blank" rel="external">github</a>代码。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>代码没有全部贴出， 因为所有的代码都在github上了～这里再贴一下项目地址：<br><a href="https://github.com/lankton/android-flowlayout" target="_blank" rel="external">https://github.com/lankton/android-flowlayout</a></p>
<p>这个项目， 肯定还是有很多需要优化的地方， 欢迎各位提出各种意见或者建议，也期待能够被大家使用。<br>可以的话，也顺求star～  谢谢。</p>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><h2 id="发布到JCenter-20160519"><a href="#发布到JCenter-20160519" class="headerlink" title="发布到JCenter-20160519"></a>发布到JCenter-20160519</h2><p>为方便使用，已将library发布到JCenter，开发者可以使用gradle或者maven进行依赖的配置。 </p>
<h3 id="latest-version"><a href="#latest-version" class="headerlink" title="latest version"></a>latest version</h3><p>见<a href="https://github.com/lankton/android-flowlayout/blob/master/README.md" target="_blank" rel="external">项目README</a>头部图标。</p>
<h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;cn.lankton:flowlayout:latest version&apos;</div></pre></td></tr></table></figure>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;cn.lankton&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;flowlayout&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;latest version&lt;/version&gt;</div><div class="line">  &lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】结合源码解析Android消息队列工作流程]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90Android%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在对一些Android比较基础的知识做一些回顾。回顾到消息队列部分， 便想着结合源码做一篇关于Android消息队列的讲解。然而，我深知这个主题已经被各种翻来覆去地讲， 各种刨根挖底地讲， 各种XXXX地讲… …各位同学应该也已经看烦了。 但是我还是决定写这么一篇博客。。。  </p>
<p>在整个博文行进过程中， 我会用自己的思路进行组织， 先细讲Looper循环， 再细讲Handler对消息的处理，对源码的截选也做了排布， 希望比较其它类似的文章， 能有更加清楚、明了的叙述。(just hope</p>
<h2 id="简例"><a href="#简例" class="headerlink" title="简例"></a>简例</h2><p>在博客的开头， 我们先看一段代码， 即消息队列的常见使用方式。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Looper.prepare();</div><div class="line">                <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">                        Log.v(<span class="string">"handlerdemo"</span>, <span class="string">""</span> + msg.what);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        Message msg = Message.obtain();</div><div class="line">                        msg.what = <span class="number">9</span>;</div><div class="line">                        handler.sendMessage(msg);</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">                Looper.loop();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个demo很简单， 在一个新线程a中， 调起另一个新线程b， 并用handler从b中发送消息， 在a线程中打印出相关信息。（为了保证demo的一般性， a线程也用的新线程， 而不是UI线程）  </p>
<h2 id="消息队列的循环"><a href="#消息队列的循环" class="headerlink" title="消息队列的循环"></a>消息队列的循环</h2><h3 id="1-在线程入口方法开头调用Loop-prepare"><a href="#1-在线程入口方法开头调用Loop-prepare" class="headerlink" title="1. 在线程入口方法开头调用Loop.prepare"></a>1. 在线程入口方法开头调用Loop.prepare</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">        prepare(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到， 调用该方法， 创建了一个Looper对象， 并将其保存在ThreadLocal对象中。sThreadLocal是Looper类的static对象，在不同线程中， 各自set进去的对象相互独立。</p>
<p>创建Looper对象的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private Looper(boolean quitAllowed) &#123;</div><div class="line">    mQueue = new MessageQueue(quitAllowed);</div><div class="line">    mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建Looper的过程中， 也创建了消息队列(MessageQueue)，并作为final 属性保存在Looper对象中。<br>即：<br><strong>一个Looper， 对应一个MessageQueue</strong>  </p>
<h3 id="2-在线程入口方法结尾执行Looper-loop方法"><a href="#2-在线程入口方法结尾执行Looper-loop方法" class="headerlink" title="2.在线程入口方法结尾执行Looper.loop方法"></a>2.在线程入口方法结尾执行Looper.loop方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很长， 我们重点看其中跟消息机制流程有关的部分.可以看到， loop的过程通过一个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (;;)</div></pre></td></tr></table></figure></p>
<p>来进行死循环, 不断从MessageQueue中取出消息， 分发给Message对应的target(即Handler）进行处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg.target.dispatchMessage(msg);</div></pre></td></tr></table></figure></p>
<p>而这个消息队列， 则是从与当前Thread相关联的Looper中取出:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Looper me = myLooper();</div><div class="line"><span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">final</span> MessageQueue queue = me.mQueue;</div></pre></td></tr></table></figure>
<p>这里可以看一下Looper.myLooper方法了。还记得前面说的ThreadLocal对象吗， 那时set了一个looper进去， 在这里就把取出来了:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在， 消息的循环机制已经很清楚了， 接下来要看的就是消息是如何被添加进队列， 以及如何被处理的了。  </p>
<h2 id="Handler发送以及处理消息"><a href="#Handler发送以及处理消息" class="headerlink" title="Handler发送以及处理消息"></a>Handler发送以及处理消息</h2><p>Handler发送消息， 主要有两种形式， 分别是send方式和post方式，两者各有sendMessageDelayed、 postDelayed等多重形式。而post方式， 最终调用的也是send方式。<br>eg：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">postDelayed</span><span class="params">(Runnable r, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">    Message m = Message.obtain();</div><div class="line">    m.callback = r;</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>虽然post方式， 传进的参数是Runnable对象， 但依然会通过该对象组装一个Message对象， 传给相应的send方法。</strong>于是我们只看send方法就好了～  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">        delayMillis = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    msg.target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到， <strong>Handler发送消息的过程， 其实就是将消息放进MessageQueue队列(mQueue)的过程，同时将Message对象的target属性指向自己。</strong><br>有人可能好奇， 在Looper对象中， 我们不是已经有了一个消息队列mQueue了吗。 我们进入Handler的构造器，来看看Handler里的mQueue是什么。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">       <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">       <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">               (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">           Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">               klass.getCanonicalName());</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   mLooper = Looper.myLooper();</div><div class="line">   <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">           <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">   &#125;</div><div class="line">   mQueue = mLooper.mQueue;</div><div class="line">   mCallback = callback;</div><div class="line">   mAsynchronous = async;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>myLooper方法， 上面已经介绍过了。那么， mQueue是什么就很清楚了：<strong>就是当前Thread所对应Looper的mQueue。我们的消息队列，一直就只有这一个。</strong></p>
<p>Handler如何处理从Looper循环从消息队列里取出的消息呢。上面我们已经在loop方法里看到了处理的入口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg.target.dispatchMessage(msg);</div></pre></td></tr></table></figure>
<p>target是什么？ 上面已经说了， 就是把消息塞进队列的Handler。看一下Handler中的相关方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">    message.callback.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码非常简单。首先判断Message对象的callback属性， 即上面post方式中作为参数的Runnable对象， 不为空则直接调用其中run方法。<br>如果callback为空，则判断Handler对象中的mCallback属性。 这个属性不是Runnable对象， 而是Handler.Callback对象。在上述Handler构造器代码中，可以看到其被形参赋值，。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果这两个分支全部走空，才轮到Hanlder对象的handleMessage方法， 对Message对象进行处理。<br>这就是Handler对Message对象的发送和处理流程。  </p>
<h2 id="在主线程中使用Looper？"><a href="#在主线程中使用Looper？" class="headerlink" title="在主线程中使用Looper？"></a>在主线程中使用Looper？</h2><p>有朋友可能会有疑问， 在主线程中我们并没有使用Looper.prepare方法为线程产生Looper对象， 也没有使用Looper.loop方法对消息队列进行循环取数据， 为什么还能使用Handler。答案很简单， 那就是Android已经帮我们做了。<br>主线程不是由我们调起， 其入口也不是我们定义。在其入口main方法的开头， 调用了Looper.prepareMainLooper()</p>
<pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>{
    prepare(<span class="keyword">false</span>);
    <span class="keyword">synchronized</span> (Looper.class) {
        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) {
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);
        }
        sMainLooper = myLooper();
    }
}
</code></pre>
<p>可以看到， 调用了普通的prepare方法。<br>在main方法的结尾， 调用了Looper.loop方法。<br>所以在主线程中， 我们放心地使用Handler就好了。</p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p><strong>谢谢看到这里！</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】访问远程数据的步骤(Messenger、AIDL、ContentProvider]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A5%E9%AA%A4-Messenger%E3%80%81AIDL%E3%80%81ContentProvider/</url>
      <content type="html"><![CDATA[<p><strong>阅读书籍：《Android开发艺术探索》</strong><br><strong>作者：任玉刚</strong><br><strong>本文为阅读其中IPC相关章节所做的简单总结，相关示例代码来自于书中。</strong></p>
<h1 id="IPC相关"><a href="#IPC相关" class="headerlink" title="IPC相关"></a>IPC相关</h1><h2 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h2><p>1.远程service 创建Messenger对象: mMessenger，并通过onBind方法提供IBinder对象; </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mMessenger.getBinder();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.client 绑定远程 service，通过ServiceConnection对象获得IBinder对象， 再通过该IBinder对象获得Messenger对象1:cm1;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            mService = <span class="keyword">new</span> Messenger(service);</div><div class="line">            Message msg = Message.obtain();</div><div class="line">            msg.what = <span class="number">99</span>;</div><div class="line">            Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">            data.putString(<span class="string">"msg"</span>, <span class="string">"hello, this is client"</span>);</div><div class="line">            msg.setData(data);</div><div class="line">            msg.replyTo = mGetReplyMessenger;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mService.send(msg);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>3.同时要用Handler创建一个新的Messenger对象，cm2，用来处理远程service返回的消息。用msg.replyTo = cm2 进行设置。之后通过cm1.send(msg)向远程service发送消息。远程service中的sm1接受消息并且处理。<br>3.sm1中Handler对象处理消息时， 可以通过msg.replyTo获取要回复的Messenger对象。使用msg.replyTo.send(msg), 即可在客户端Messenger对象cm2 的handler中进行消息的处理。</p>
<h2 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h2><ol>
<li>创建 Bean， 实现Parcelable接口；</li>
<li>创建 Manager AIDL文件， 如果用到上述 Bean， 需要建立 Bean.AIDL， 并申明那个类为parcelable</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">package cn.lankton.aidl;</div><div class="line">parcelable Book;</div></pre></td></tr></table></figure>
<p>Manager 的 aidl文件如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// IBookManager.aidl</div><div class="line">package cn.lankton.aidl;</div><div class="line"></div><div class="line">import cn.lankton.aidl.Book;</div><div class="line"></div><div class="line">// Declare any non-default types here with import statements</div><div class="line"></div><div class="line">interface IBookManager &#123;</div><div class="line">    List&lt;Book&gt; getBookList();</div><div class="line">    void addBook(in Book book);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>提供了供client调用的方法</strong><br>之后编译运行一次， IDE自动生成Manager对应的同名java文件(根据此例为 IBookManager.java)。Eclipse位于gen目录下，Android Studio位于build/generated目录下</p>
<ol>
<li>创建远程service。内部创建一个继承IBookManager.Stub的Binder对象， 实现其中的方法， 并通过onBind方法， 返回该Binder对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">return</span> mBookList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mBookList.add(book);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Android"</span>));</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"iOS"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>client 创建ServiceConnection， 并进行bindService，通过onServiceConnected获得IBinder对象，并通过asInterface方法获得远程service中的IBookManager对象，即可对远程service的数据进行操作。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            IBookManager bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                List&lt;Book&gt; list = bookManager.getBookList();</div><div class="line">                Log.i(<span class="string">"AIDLDemo"</span>, <span class="string">"query book list, list type: "</span> + list.getClass().getCanonicalName());</div><div class="line">                Log.i(<span class="string">"AIDLDemo"</span>, <span class="string">"query book list: "</span> + list.toString());</div><div class="line">                Book book = <span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">"swift"</span>);</div><div class="line">                bookManager.addBook(book);</div><div class="line">                List&lt;Book&gt; newList = bookManager.getBookList();</div><div class="line">                Log.i(<span class="string">"AIDLDemo"</span>, <span class="string">"after add book, list: "</span> + newList.toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">        bindService(intent, mConnection, BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h2><p>一个提供跨进程访问数据的解决方案。  </p>
<ol>
<li>建立远端ContentProvider， 并在manifest中申明authority和name;  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">            <span class="attr">android:authorities</span>=<span class="string">"cn.lankton.contentproviderdemo.book.provider"</span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".BookProvider"</span></div><div class="line">            <span class="attr">android:process</span>=<span class="string">":provider"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>其中， authorities最为重要， 其是本地访问远端ContentProvider的唯一表识。  </p>
<ol>
<li>实现ContentProvider中的各类方法：oncreate、 insert、 delete、 update、 query、 getType等， 暴露对数据增删改查的能力;  </li>
<li>在ContentProvider中， 可以通过UriMatcher， 将Uri子路径和int型绑定, 方便处理不同子路径的Uri。  </li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sUriMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    sUriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, BOOK_URI_CODE);</div><div class="line">    sUriMatcher.addURI(AUTHORITY, <span class="string">"user"</span>, USER_URI_CODE);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getTableName</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">    String tableName = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">switch</span> (sUriMatcher.match(uri)) &#123;</div><div class="line">        <span class="keyword">case</span> BOOK_URI_CODE:</div><div class="line">            tableName = DBOpenHelper.BOOK_TABLE_NAME;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> USER_URI_CODE:</div><div class="line">            tableName = DBOpenHelper.USER_TABLE_NAME;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tableName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来， 在本地访问远程数据  </p>
<ol>
<li>通过远程ContentProvider的authorities拼接Uri;  </li>
<li>通过getContentResolver获得ContentResolver对象</li>
<li>通过该ContentResolover对象和上面的Uri对象，对远程的数据增删改查。（实际可以理解为调用远程ContentProvider的各种相应方法  </li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Uri bookUri = Uri.parse(<span class="string">"content://cn.lankton.contentproviderdemo.book.provider/book"</span>);</div><div class="line">ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">values.put(<span class="string">"_id"</span>, <span class="number">6</span>);</div><div class="line">values.put(<span class="string">"name"</span>, <span class="string">"程序的现代艺术"</span>);</div><div class="line">getContentResolver().insert(bookUri, values);</div><div class="line">Cursor bookCursor = getContentResolver().query(bookUri, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"name"</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"><span class="keyword">while</span> (bookCursor.moveToNext()) &#123;</div><div class="line">    Book book  = <span class="keyword">new</span> Book();</div><div class="line">    book.bookId = bookCursor.getInt(bookCursor.getColumnIndex(<span class="string">"_id"</span>));</div><div class="line">    book.bookName = bookCursor.getString(bookCursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">    Log.d(TAG, <span class="string">"query book:"</span> + book.bookId + <span class="string">","</span> + book.bookName);</div><div class="line">&#125;</div><div class="line">bookCursor.close();</div></pre></td></tr></table></figure>
<p>需要注意：<br>ContentProvider的query, update, insert, delete四大方法存在多线程并发访问的。用同一个SQLiteDataBase对象可以实现同步， 但如果远程数据是List等情况，必须自己想办法保证同步。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】软引用(SoftReference)与LruCache]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%BD%AF%E5%BC%95%E7%94%A8-SoftReference-%E4%B8%8ELruCache/</url>
      <content type="html"><![CDATA[<p>Android开发中， 我们通常需要用到缓存，比如加载图片。使用缓存的好处大家都知道， 比如避免重复访问网络资源、避免重复读取磁盘等， 以提升图片显示速度，这里就不再详述。加载图片使用缓存， 经常会出现OOM(out of memory, 内存不足)。为了避免OOM， 必须要在向内存中加载新资源的同时， 将旧的资源释放。在较早时候， 开发者通常使用软引用解决给问题，而现在， 被广泛使用的方法是使用LruCache。</p>
<h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用的原理：当一个内存空间， <strong>只有软引用</strong>指向它时， 当内存不足， GC会将该内存空间回收。<br>使用方法：<br>1.创建软引用HashMap作为缓存</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = <span class="keyword">new</span> HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</div></pre></td></tr></table></figure>
<p>2.向缓存中添加新Bitmap</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToCache</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        <span class="comment">// 强引用的Bitmap对象</span></div><div class="line">        Bitmap bitmap = BitmapFactory.decodeFile(path);</div><div class="line">        <span class="comment">// 软引用的Bitmap对象</span></div><div class="line">        SoftReference&lt;Bitmap&gt; softBitmap = <span class="keyword">new</span> SoftReference&lt;Bitmap&gt;(bitmap);</div><div class="line">        <span class="comment">// 添加该对象到Map中使其缓存</span></div><div class="line">        imageCache.put(path, softBitmap);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> 注意：由于bitmap为局部变量， 当方法结束时，其指向的内存空间依然只有imageCache中的软引用。</p>
<p>3.从缓存中读取Bitmap</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapByPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        <span class="comment">// 从缓存中取软引用的Bitmap对象</span></div><div class="line">        SoftReference&lt;Bitmap&gt; softBitmap = imageCache.get(path);</div><div class="line">        <span class="comment">// 判断是否存在软引用</span></div><div class="line">        <span class="keyword">if</span> (softBitmap == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 取出Bitmap对象，如果由于内存不足Bitmap被回收，将取得空</span></div><div class="line">        Bitmap bitmap = softBitmap.get();</div><div class="line">        <span class="keyword">if</span>(bitmap==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">       <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>软引用释放资源是<strong>被动</strong>的， 当内存不足时， GC会对其主动回收。</p>
<h3 id="LruCache"><a href="#LruCache" class="headerlink" title="LruCache"></a>LruCache</h3><p>关于LruCache， 这里就不贴代码了。 因为这个缓存模式不需要开发者自己去实现。这个类包含在android-support-v4包中， 使用方法和其他缓存一样：加载图片前判断缓存中是否已经存在， 如果不存在就重新从图片源加载。<br>与使用软引用不同， LruCache内部通过一个LinkedHashMap保存资源的强引用。其控制内存的方式是<strong>主动</strong>的，需要在内部记录当前缓存大小， 并与初始化时设置的max值比较，如果超过， 就将排序最靠前(即最近最少使用)的资源从LinkedHashMap中移除。这样， 就没有任何引用指向资源的内存空间了。该内存空间无人认领， 会在GC时得到释放。<br>关于LinkedHashMap， 其是HashMap的子类， 支持两种排序方式， 第一种是根据插入顺序排序， 第二种就是根据访问进行排序。采用哪种排序方式由其构造函数传入参数决定。在LruCache中， 初始化LinkedHashMap的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>其中最后一个参数， 就是是否根据访问进行排序。</p>
<h3 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h3><p>二者有很多相似的部分：</p>
<ol>
<li>无论是通过软引用，还是LruCache， 最后都是通过系统GC到达回收内存的目的；</li>
<li>需要确保没有缓存列表意外的全局强引用指向资源（如果被ImageView显示， 则在ImageView内部也会有对资源的强引用， 要注意）， 否则资源不会得到释放；</li>
</ol>
<p>也有一些不同的地方， 其中最大的不同就是二者释放内存， 一个是被动的， 一个是主动的（ 虽然结局都是被动地被GC处理）。</p>
<h3 id="关于recycle-调用"><a href="#关于recycle-调用" class="headerlink" title="关于recycle()调用"></a>关于recycle()调用</h3><p>其实最早在使用LruCache或者软引用的时候， 我产生了这样的疑问：GC可以释放没有强引用指向的内存，但Bitmap的图片资源（像素数据）， 不是保存在native层， 需要显示调用recycle方法进行内存释放吗。而在一些人关于LruCache的博客中， 看到博主回复类似问题，说该操作由LruCache帮助完成了。然而我看遍了LruCache 的源码， 也没有看到哪里有释放底层资源的操作，这反而更加深了我的疑惑。<br>后来在网上看到了这样的说明， 即在Android 3.0(Level 11)及其以后， Bitmap的像素数据与Bitmap的对象一起保存在java堆中， 如此， 系统GC时， 也可以一起将像素资源回收了。<br><strong>要注意的是</strong>， 在使用LruCache时， 千万不要画蛇添足， 在LruCache的entryRemoved回调中实现对释放资源的手动recycle。 因为虽然该Bitmap从LinkedHashMap中被移除了， 但我们无法得知外部是否还有对当前Bitmap的引用。如果还有ImageView正显示着该图片， 那必然会导致崩溃。</p>
<h3 id="最适用场景"><a href="#最适用场景" class="headerlink" title="最适用场景"></a>最适用场景</h3><p>从以上总结可以看出，两种方案依靠的都是系统GC，所以当有外部强引用， 包括有ImageView正在使用Bitmap时， 这种方案可以说并无卵用。但是在ListView以及GridView这样的场景下， 由于item的视图资源不断回收再利用，就的ImageView会使用新的Bitmap， 则会失去对就Bitmap的强引用。旧的Bitmap就可以放心去了。。。</p>
<h3 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h3><p>弱引用实现缓存， 有一个必要条件就是它在系统内存不足时才会被释放，而从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠， 即在内存充足的情况下， 它们指向的对象依然有可能被回收。如此， 软引用Map做缓存， <strong>缓存命中率会变低</strong>，效果就会大打折扣。<br>所以， 使用“主动“方式， 来实现对内存控制的LruCache成为了现在实现内存缓存的主流方式， 显然更可靠，也更值得推荐。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】0行代码实现任意形状图片展示--android-anyshape]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%910%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E5%BD%A2%E7%8A%B6%E5%9B%BE%E7%89%87%E5%B1%95%E7%A4%BA-android-anyshape/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Android开发中， 我们经常会遇到一些场景， 需要以一些特殊的形状显示图片， 比如圆角矩形、圆形等等。关于如何绘制这类形状， 网上已经有很多的方案，比如自定义控件重写onDraw方法， 通过canvas的各种draw方法进行绘制等。那么， 更复杂的图形呢？比如，五角星？比如组合图形？又或者是各种奇奇怪怪的不规则图形呢？有同学会说， 如果已知不规则图形的具体形状， 那我们就可以通过连接顶点的方式， 找出path， 然后通过drawPath方法绘制出来啊。嗯。。。很有道理， 但是先不说有些图像，可能顶点巨多， 或者弯弯曲曲很难找出具体的顶点， 难道我们要为每一个特殊的形状， 单独写一个独立的控件， 或者一套独立的代码吗？<br>可以肯定是可以，但是我觉得， 最好还是不要这么做。。于是我有了一个想法， <strong>用一张图片， 告诉控件，我想要什么样的形状， 然后控件自动按照这个形状， 帮我把图片显示出来</strong>。于是有了这个项目－－<a href="https://github.com/lankton/android-anyshape" target="_blank" rel="external">android-anyshape</a>。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p><img src="http://img.blog.csdn.net/20160327163538291" width="200px">&nbsp;&nbsp;&nbsp;<img src="http://img.blog.csdn.net/20160327163638432" width="200px"><br>左边是使用了普通ImageView的展示效果， 右边是使用了项目中AnyshapeImageView的效果。想使用AnyshapeImageView达到右边的样式， 仅需提供三张遮罩图片，通过”anyshapeMask”参数提供给控件即可（下文会说明）。<br>三张“遮罩”图片如下：<br><img src="http://img.blog.csdn.net/20160327164339919" width="150px">&nbsp;&nbsp;&nbsp;<img src="http://img.blog.csdn.net/20160327175945131" width="150px">&nbsp;&nbsp;&nbsp;<img src="http://img.blog.csdn.net/20160327180054263" width="150px"><br>与普通的遮罩图片不同， 这里要求<strong>图片的背景完全透明， 即alpha通道的值为0， 而需要显示的图形，对具体的颜色没有任何要求，不透明即可</strong>。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>控件的使用很简单， 由于继承ImageView， 所以使用方法类似于ImageView，但多了一个重要的自定义参数：anyshapeMask<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">cn.lankton.anyshape.AnyshapeImageView</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></div><div class="line">   <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></div><div class="line">   <span class="attr">android:src</span>=<span class="string">"@drawable/kumamon"</span></div><div class="line">   <span class="attr">app:anyshapeMask</span>=<span class="string">"@drawable/singlestar"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>在布局文件中加入这段xml， 展示的就是上面图中那头五角星形状的熊本熊～<br>实现这个功能的思路其实很简单，通过对一张“遮罩”图片各像素透明度的扫描，获得一个Path对象， 该Path对象包含了所有不透明像素的集合。然后就很简单了， 通过Canvas对象的drawPath方法，将我们要显示的图片刷上去即可。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="从Bitmap中提取Path"><a href="#从Bitmap中提取Path" class="headerlink" title="从Bitmap中提取Path"></a>从Bitmap中提取Path</h2><p><strong>这是这个项目中最重要的部分</strong>。代码如下：<br>PathInfoManager.getPathFromBitmap:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Path <span class="title">getPathFromBitmap</span><span class="params">(Bitmap mask)</span> </span>&#123;</div><div class="line">    Path path = <span class="keyword">new</span> Path();</div><div class="line">    <span class="keyword">int</span> bWidth = mask.getWidth();</div><div class="line">    <span class="keyword">int</span> bHeight = mask.getHeight();</div><div class="line">    <span class="keyword">int</span>[] origin = <span class="keyword">new</span> <span class="keyword">int</span>[bWidth];</div><div class="line">    <span class="keyword">int</span> lastA;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bHeight; i++) &#123;</div><div class="line">        mask.getPixels(origin, <span class="number">0</span>, bWidth, <span class="number">0</span>, i, bWidth, <span class="number">1</span>);</div><div class="line">        lastA = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bWidth; j++) &#123;</div><div class="line">            <span class="keyword">int</span> a = Color.alpha(origin[j]);</div><div class="line">            <span class="keyword">if</span> (a != <span class="number">0</span> &amp;&amp; lastA == <span class="number">0</span>) &#123;</div><div class="line">                path.moveTo(j, i);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; lastA !=<span class="number">0</span> ) &#123;</div><div class="line">                path.lineTo(j - <span class="number">1</span>, i);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a != <span class="number">0</span> &amp;&amp; j == bWidth - <span class="number">1</span>) &#123;</div><div class="line">                path.lineTo(j, i);</div><div class="line">            &#125;</div><div class="line">            lastA = a;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> path;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我设计的方案很简单，逐行扫描Bitmap中的像素，实现方法是用getPixels方法获得每行的像素数组，然后遍历分析。步骤如下：</p>
<ol>
<li>遇到一个不透明像素，进行判断， 如果它的上一个像素不透明， 或者它本身就是行首， 那我们就把它看作一段不透明区域的开头，通过moveTo方法将Path移动到此点；</li>
<li>遇到一个透明像素，进行判断，如果它的上一个像素透明，那我们就把它的上一个像素看作一段不透明区域的结尾， 通过lineTo的方式， 将它与之前的开头像素连接。</li>
<li>重复1、2步， 直到扫描完全行。需要注意的是， 如果行尾是不透明像素， 那就直接连上。防止最后一段不透明区域只有起点没有终点。<br>这样， 每一行的连接结果，就组成了整张图片的扫描结果～<h2 id="通过Path，显示图像"><a href="#通过Path，显示图像" class="headerlink" title="通过Path，显示图像"></a>通过Path，显示图像</h2>先看一下AnyshapeImageView的初始化方法：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnyshapeImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    <span class="keyword">this</span>.context = context;</div><div class="line">    TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.AnyShapeImageView, defStyleAttr, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> n = a.getIndexCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> attr = a.getIndex(i);</div><div class="line">        <span class="keyword">if</span> (attr == R.styleable.AnyShapeImageView_anyshapeMask) &#123;</div><div class="line">            maskResId = a.getResourceId(attr, <span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="number">0</span> == maskResId) &#123;</div><div class="line">                <span class="comment">//did not set mask</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr == R.styleable.AnyShapeImageView_anyshapeBackColor) &#123;</div><div class="line">            backColor = a.getColor(attr, Color.TRANSPARENT);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    a.recycle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是调用通过anyshapeMask参数， 获得“遮罩”图片的资源ID以及背景色。 真正通过资源ID解析获取遮罩的过程放在了onMeaaure中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> mWidth = getMeasuredWidth();</div><div class="line">    <span class="keyword">int</span> mHeight = getMeasuredHeight();</div><div class="line">    <span class="keyword">if</span> (mWidth != <span class="number">0</span> &amp;&amp; mHeight != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (maskResId &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        PathInfo pi = PathManager.getInstance().getPathInfo(maskResId);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pi) &#123;</div><div class="line">            originMaskPath = pi.path;</div><div class="line">            originMaskWidth = pi.width;</div><div class="line">            originMaskHeight = pi.height;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">            options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">            BitmapFactory.decodeResource(context.getResources(), maskResId, options);</div><div class="line">            <span class="keyword">int</span> widthRatio = (<span class="keyword">int</span>)(options.outWidth * <span class="number">1f</span> / mWidth);</div><div class="line">            <span class="keyword">int</span> heightRatio = (<span class="keyword">int</span>)(options.outHeight * <span class="number">1f</span> / mHeight);</div><div class="line">            <span class="keyword">if</span> (widthRatio &gt; heightRatio) &#123;</div><div class="line">                options.inSampleSize = widthRatio;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                options.inSampleSize = heightRatio;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (options.inSampleSize == <span class="number">0</span>) &#123;</div><div class="line">                options.inSampleSize = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">            Bitmap maskBitmap = BitmapFactory.decodeResource(context.getResources(), maskResId, options);</div><div class="line">            originMaskPath = PathManager.getInstance().getPathFromBitmap(maskBitmap);</div><div class="line">            originMaskWidth = maskBitmap.getWidth();</div><div class="line">            originMaskHeight = maskBitmap.getHeight();</div><div class="line">            pi = <span class="keyword">new</span> PathInfo();</div><div class="line">            pi.height = originMaskHeight;</div><div class="line">            pi.width = originMaskWidth;</div><div class="line">            pi.path = originMaskPath;</div><div class="line">            PathManager.getInstance().addPathInfo(maskResId, pi);</div><div class="line">            maskBitmap.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>PathInfo：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> Path path;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> width;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> height;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而我们看到，用户进行生成Bitmap－获取Path这一系列耗时、耗内存操作之前，先会判断缓存里是否已经有与该资源ID匹配的PathInfo， 如果有， 则不用进行这部分操作。如果没有，根据传入的资源ID，生成PathInfo对象，并存入缓存。同时，根据控件的宽高，对decode做了限制，预防了OOM 和 加载资源过大的问题。<br>关于这块缓存，下面会说明。</p>
<p>再看onSizeChanged方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">    vHeight = getHeight();</div><div class="line">    vWidth = getWidth();</div><div class="line">    <span class="keyword">if</span> (originMaskPath != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//scale the size of the path to fit the one of this View</span></div><div class="line">        Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">        matrix.setScale(vWidth * <span class="number">1f</span> / originMaskWidth, vHeight * <span class="number">1f</span> / originMaskHeight);</div><div class="line">        originMaskPath.transform(matrix, realMaskPath);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的代码， 主要目的是对Path对象进行缩放， 已匹配控件的实际大小。可以看到， <strong>如果不希望展示的形状被拉伸或者变形， 那么AnyshapeImageView的宽高比， 最好和“遮罩”图片的宽高比保持一致。</strong></p>
<p>接下来就是在onDraw里绘制形状并刷上图片了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == originMaskPath) &#123;</div><div class="line">        <span class="comment">// if the mask is null, the view will work as a normal ImageView</span></div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (vWidth == <span class="number">0</span> || vHeight == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    paint.reset();</div><div class="line">    paint.setStyle(Paint.Style.STROKE);</div><div class="line">    <span class="comment">//get the drawable to show. if not set the src, will use  backColor</span></div><div class="line">    Drawable showDrawable = getDrawable();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != showDrawable) &#123;</div><div class="line">        Bitmap showBitmap = ((BitmapDrawable) showDrawable).getBitmap();</div><div class="line">        Shader shader = <span class="keyword">new</span> BitmapShader(showBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">        Matrix shaderMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">        <span class="keyword">float</span> scaleX = vWidth * <span class="number">1.0f</span> / showBitmap.getWidth();</div><div class="line">        <span class="keyword">float</span> scaleY = vHeight * <span class="number">1.0f</span> / showBitmap.getHeight();</div><div class="line">        shaderMatrix.setScale(scaleX, scaleY);</div><div class="line">        shader.setLocalMatrix(shaderMatrix);</div><div class="line">        paint.setShader(shader);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//no src , use the backColor to fill the path</span></div><div class="line">        paint.setColor(backColor);</div><div class="line">    &#125;</div><div class="line">    canvas.drawPath(realMaskPath, paint);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>看了上面的博文， 各位一定清楚了，作为参数传入的资源ID，实际上只是为了获取一个Path对象。那么我们可以建立一个Integer－Path的映射关系， 用来缓存已经读取出来的Path。后面需要Path， 只需要通过资源ID去缓存里寻找即可，毕竟读取Path是一个费时间又费资源的操作。<br>这样看来，我们已经对AnyshapeImageView的使用进行了优化， 毕竟同一个形状的展示，我们只要执行一次从图片中解析Path对象的操作即可。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个项目，是我花了将近一周时间断断续续完成的。代码不多， 也不复杂，希望能够帮到大家， 或者为大家提供一些思路。<br>再贴一下项目的地址， 包括demo在内：<br><a href="https://github.com/lankton/android-anyshape" target="_blank" rel="external">https://github.com/lankton/android-anyshape</a><br>如果你觉得这个项目，或者这篇博文对你起到了一些帮助，欢迎star支持一下～ </p>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><h2 id="2016-05-12"><a href="#2016-05-12" class="headerlink" title="2016-05-12"></a>2016-05-12</h2><p>优化了AnyshapeImageView解析遮罩的过程，PathManager中的createPaths（预先解析Path）变得繁琐且不必要，故删除。 简化后的使用可见<a href="https://github.com/lankton/android-anyshape/blob/master/README.md" target="_blank" rel="external">项目README</a>。<br>本次更新后对博文上面代码、讲解内容也有改动。</p>
<h2 id="发布到JCenter-20160519"><a href="#发布到JCenter-20160519" class="headerlink" title="发布到JCenter-20160519"></a>发布到JCenter-20160519</h2><p>为方便使用，已将library发布到JCenter，开发者可以使用gradle或者maven进行依赖的配置。</p>
<p>###latest version<br>可见<a href="https://github.com/lankton/android-anyshape/blob/master/README.md" target="_blank" rel="external">项目README</a>头部图标</p>
<h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;cn.lankton:anyshape:latest version&apos;</div></pre></td></tr></table></figure>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;cn.lankton&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;anyshape&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;latest version&lt;/version&gt;</div><div class="line">  &lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】自定义控件实现带百分比显示进度条，可自定义颜色]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%B8%A6%E7%99%BE%E5%88%86%E6%AF%94%E6%98%BE%E7%A4%BA%E8%BF%9B%E5%BA%A6%E6%9D%A1%EF%BC%8C%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%9C%E8%89%B2/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>前天做了一个带百分比显示的条形进度条，效果如下：<br><img src="http://img.blog.csdn.net/20160110180326105" alt="这里写图片描述"></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>这个自定义进度条， 看起来简单， 做起来。。。其实也很简单： 主要通过继承View类， 并重写其onDraw方法实现。<br>思路分为3步：</p>
<ol>
<li>画进图条背景(图中灰色部分</li>
<li>根据进度画出进度条(图中绿色部分</li>
<li>绘制进度百分比(图中白色文本</li>
</ol>
<p>前面2个步骤非常简单， 通过drawRoundRect方法进行绘制即可， 第3步也不难， 重点在于定位好绘制文本的位置。文本的水平位置很容易确认， 因为Paint对象提供了measureText方法， 可以获得到文本的长度。用绿色进度条的长度和它做一个减法， 就能得出绘制文本的水平坐标。<br>竖直坐标， 就有些复杂了。先看下图（图片来源：<a href="http://www.xyczero.com/blog/article/20/）：" target="_blank" rel="external">http://www.xyczero.com/blog/article/20/）：</a><br><img src="http://xyczero.qiniudn.com/Bolg_%E5%A6%82%E4%BD%95%E2%80%9C%E4%BB%BB%E6%80%A7%E2%80%9D%E4%BD%BF%E7%94%A8Android%E7%9A%84drawText%28%29_base.png" alt="这里写图片描述"></p>
<p>在Canvas对象的drawText方法中， y坐标参数指的是baseline线的y坐标参数。我们所要做的， 就是求出， 当文本垂直居中显示时， 该y坐标的值。<br>求值， 需要用到Paint的内部类：FontMetrics。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FontMetrics</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * The maximum distance above the baseline for the tallest glyph in</div><div class="line">         * the font at a given text size.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">float</span>   top;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * The recommended distance above the baseline for singled spaced text.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">float</span>   ascent;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * The recommended distance below the baseline for singled spaced text.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">float</span>   descent;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * The maximum distance below the baseline for the lowest glyph in</div><div class="line">         * the font at a given text size.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">float</span>   bottom;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * The recommended additional space to add between lines of text.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">float</span>   leading;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>由源码可以看到该类对象提供的几个值的含义。其中：<br><strong><em>ascent</em></strong> 代表的就是上图中ascent线的y坐标减去baseline线的y坐标， <strong>所以该值为负数</strong>；<br><strong><em>descent</em></strong> 代表的就是上图中的descent线的y坐标减去baseline的y坐标， <strong>所以该值为正数</strong>；<br>由此，可知： 文本的高度为2个距离之和， 即2个数字之差：<br>height ＝ descent - ascent; (1)<br>又：设空间高度为Height<br>baseline y坐标 baseY = 1/2 Height + (1/ 2 height - descent); (2)</p>
<p>由(1) (2)式可得：<br>baseY ＝ 1/2 Height - 1/2 ascent - 1/2 descent;</p>
<p>由此， 需要的数据都被求出来了。<br>同时， 在values/attrs.xml中添加自定义参数， 使三种颜色可以在布局文件中被配置：</p>
<p>attrs.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"RoundedRectProgressBar"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"backColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"barColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>自定义进度条RoundedRectProgressBar.java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.landemo.rectprogressbar;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.RectF;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lankton on 16/1/8.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundedRectProgressBar</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> barColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> backColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> textColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> radius;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> progress = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundedRectProgressBar</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">        <span class="comment">/*获取自定义参数的颜色值*/</span></div><div class="line">        TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.RoundedRectProgressBar, defStyle, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> n = a.getIndexCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> attr = a.getIndex(i);</div><div class="line">            <span class="keyword">switch</span> (attr)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">case</span> R.styleable.RoundedRectProgressBar_backColor:</div><div class="line">                    backColor = a.getColor(attr, Color.GRAY);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> R.styleable.RoundedRectProgressBar_barColor:</div><div class="line">                    barColor = a.getColor(attr, Color.GREEN);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> R.styleable.RoundedRectProgressBar_textColor:</div><div class="line">                                        textColor = a.getColor(attr, Color.WHITE);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundedRectProgressBar</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundedRectProgressBar</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        radius = <span class="keyword">this</span>.getMeasuredHeight() / <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        <span class="comment">//背景</span></div><div class="line">        mPaint.setColor(backColor);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        canvas.drawRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.getMeasuredWidth(), <span class="keyword">this</span>.getMeasuredHeight()), radius, radius, mPaint);</div><div class="line">        <span class="comment">//进度条</span></div><div class="line">        mPaint.setColor(barColor);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        canvas.drawRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.getMeasuredWidth() * progress / <span class="number">100f</span>, <span class="keyword">this</span>.getMeasuredHeight()), radius, radius, mPaint);</div><div class="line">        <span class="comment">//进度</span></div><div class="line">        mPaint.setColor(textColor);</div><div class="line">        mPaint.setTextSize(<span class="keyword">this</span>.getMeasuredHeight() / <span class="number">1.2f</span>);</div><div class="line">        String text = <span class="string">""</span> + progress + <span class="string">"%"</span>;</div><div class="line">        <span class="keyword">float</span> x = <span class="keyword">this</span>.getMeasuredWidth() * progress / <span class="number">100</span> - mPaint.measureText(text) - <span class="number">10</span>;</div><div class="line">        <span class="keyword">float</span> y = <span class="keyword">this</span>.getMeasuredHeight() / <span class="number">2f</span> - mPaint.getFontMetrics().ascent / <span class="number">2f</span> - mPaint.getFontMetrics().descent / <span class="number">2f</span>;</div><div class="line">        canvas.drawText(text, x, y, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*设置进度条进度, 外部调用*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (progress &gt; <span class="number">100</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.progress = <span class="number">100</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (progress &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.progress = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.progress = progress;</div><div class="line">        &#125;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在MainActivity里添加方法， 调用RoundedRectProgressBar的setProgress方法， 重绘进度条。 这里用Timer对象模拟进度的不断变化。<br>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.souche.rectprogressbar.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.souche.rectprogressbar.RoundedRectProgressBar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/bar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"24dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">app:backColor</span>=<span class="string">"#E6E6E6"</span></div><div class="line">        <span class="attr">app:barColor</span>=<span class="string">"#33CC99"</span></div><div class="line">        <span class="attr">app:textColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"reset"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.landemo.rectprogressbar;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RoundedRectProgressBar bar;</div><div class="line">    <span class="keyword">private</span> Button btn;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> progress;</div><div class="line">    <span class="keyword">private</span> Timer timer;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        bar = (RoundedRectProgressBar) findViewById(R.id.bar);</div><div class="line">        btn = (Button) findViewById(R.id.btn);</div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                reset();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进度条从头到尾跑一次</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        progress = <span class="number">0</span>;</div><div class="line">        timer = <span class="keyword">new</span> Timer();</div><div class="line">        timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                bar.setProgress(progress);</div><div class="line">                progress ++;</div><div class="line">                <span class="keyword">if</span> (progress &gt; <span class="number">100</span>) &#123;</div><div class="line">                    timer.cancel();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">0</span>, <span class="number">30</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】打开后台运行或者未开启的应用]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E6%89%93%E5%BC%80%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%88%96%E8%80%85%E6%9C%AA%E5%BC%80%E5%90%AF%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>思考这个问题的起因是在业务中遇到这样一个场景：应用在后台或者非运行状态下的时候， 点击通知栏的相关通知，发送相应的Broadcast， 相应的receiver需要唤起应用。这里分为2种情况：</p>
<ol>
<li>应用运行在后台， 则打开应用后， 界面保持为应用最后展示的界面。</li>
<li>应用未开启，则重新启动。 </li>
</ol>
<p>在网上没有找到合适的解决方案， 自己的解决方案参看以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 打开应用. 应用在前台不处理,在后台就直接在前台展示当前界面, 未开启则重新启动</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">openApplicationFromBackground</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    Intent intent;</div><div class="line">    ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">    List&lt;ActivityManager.RunningTaskInfo&gt; list = am.getRunningTasks(<span class="number">100</span>);</div><div class="line">    <span class="keyword">if</span> (!list.isEmpty() &amp;&amp; list.get(<span class="number">0</span>).topActivity.getPackageName().equals(context.getPackageName())) &#123;</div><div class="line">        <span class="comment">//此时应用正在前台, 不作处理</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (ActivityManager.RunningTaskInfo info : list) &#123;</div><div class="line">        <span class="keyword">if</span> (info.topActivity.getPackageName().equals(context.getPackageName())) &#123;</div><div class="line">            intent = <span class="keyword">new</span> Intent();</div><div class="line">            intent.setComponent(info.topActivity);</div><div class="line">            intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);</div><div class="line">            <span class="keyword">if</span> (! (context <span class="keyword">instanceof</span> Activity)) &#123;</div><div class="line">                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">            &#125;</div><div class="line">            context.startActivity(intent);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());</div><div class="line">    context.startActivity(intent);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>思路比较简单：</p>
<ol>
<li>获取当前正在运行的任务栈，取最多100个(应该已经足够):<br><code>List&lt;ActivityManager.RunningTaskInfo&gt; list = am.getRunningTasks(100);</code></li>
<li>通过第1个任务栈判断应用是否在前台。如果是， 直接返回不做任何处理；</li>
<li>遍历这100个任务栈的顶层Activity， 判断包名与本应用是否一致。如果一致， 直接通过跳转打开。 同时需要设置FLag      :FLAG_ACTIVITY_SINGLE_TOP  ，避免重复打开topActivity。如果遍历之后没有发现一致， 可以视作应用未打开， 进行第4步操作;</li>
<li>没有在运行任务栈里找到当前应用，直接通过包名启动应用：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());</div><div class="line">        context.startActivity(intent);</div></pre></td></tr></table></figure>
<p>经过检验， 达到了目标效果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】TextView 显示超链接的几种方法]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91TextView-%E6%98%BE%E7%A4%BA%E8%B6%85%E9%93%BE%E6%8E%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="TextView超链接原理"><a href="#TextView超链接原理" class="headerlink" title="TextView超链接原理"></a>TextView超链接原理</h2><p>在这篇博客的开头， 先介绍一下TextView中超链接是如何起作用的。<br>用户点击文本中的超链接， 会自动生成一个隐式的Intent。这个Intent包含了至少两个信息：action和data。 Action的值为android.intent.action.VIEW， 而data则为超链接的内容。以下文中第一种超链接显示方法为例，点开网址超链接，可以在log中看到这样一条日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11-15 02:31:01.818 730-1035/? I/ActivityManager: START u0 &#123;act=android.intent.action.VIEW dat=http://www.lankton.cn cmp=com.android.browser/.BrowserActivity (has extras)&#125; from uid 10062 on display 0</div></pre></td></tr></table></figure>
<p>系统通过该Intent， 选择合适的Activity进行处理， 达到超链接的效果。</p>
<h2 id="demo展示"><a href="#demo展示" class="headerlink" title="demo展示"></a>demo展示</h2><p>文中即将说明的四种超链接方法，分别对应demo中的四行， 请对号入座～<br><img src="http://img.blog.csdn.net/20151115162013610" alt="这里写图片描述"></p>
<h2 id="显示超链接的几种方式"><a href="#显示超链接的几种方式" class="headerlink" title="显示超链接的几种方式"></a>显示超链接的几种方式</h2><h3 id="自动显示超链接，-如电话、网络地址等"><a href="#自动显示超链接，-如电话、网络地址等" class="headerlink" title="自动显示超链接， 如电话、网络地址等"></a>自动显示超链接， 如电话、网络地址等</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">link_tv = (TextView) <span class="keyword">this</span>.findViewById(R.id.link_tv);</div><div class="line">link_tv.setAutoLinkMask(Linkify.ALL);</div><div class="line"></div><div class="line">String a1 = <span class="string">"hello, 13323332333 www.lankton.cn."</span>;</div><div class="line">link_tv.setText(a1);</div></pre></td></tr></table></figure>
<p>这样电话和网络地址就会在TextView中高亮显示， 并且可以点击跳转。<br>需要注意的是， 必须先setAutoLinkMask， 再设置文本内容，才会生效。<br>同样可以在布局文件里设置AutoLink属性达到同样效果。</p>
<h3 id="使用html语法"><a href="#使用html语法" class="headerlink" title="使用html语法"></a>使用html语法</h3><p>这里演示通过点击超链接， 跳转到另外一个Activity。<br>首先在Manifest.xml里配置要调转的Activity。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"lankton"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里的重点就是配置了data的scheme， 当点击超链接生成的intent， data的scheme与之相同， 则可以跳转过来。<br>MainActivity中java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">link_tv2 = (TextView) <span class="keyword">this</span>.findViewById(R.id.link_tv2);  link_tv2.setMovementMethod(LinkMovementMethod.getInstance());<span class="comment">// 必须加</span></div><div class="line">String a2 = <span class="string">"&lt;a href='lankton://lankton/param1/param2'&gt;second activity&lt;/a&gt;"</span>;</div><div class="line">CharSequence cs = Html.fromHtml(a2);</div><div class="line">link_tv2.setText(cs);</div></pre></td></tr></table></figure>
<p>点击超链接产生如下日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11-15 02:46:38.616 730-747/? I/ActivityManager: START u0 &#123;act=android.intent.action.VIEW dat=lankton://lankton/param1/param2 cmp=cn.lankton.linkdemo/.SecondActivity (has extras)&#125; from uid 10062 on display 0</div></pre></td></tr></table></figure>
<h3 id="使用SpannableString，-通过ClickableSpan进行设置"><a href="#使用SpannableString，-通过ClickableSpan进行设置" class="headerlink" title="使用SpannableString， 通过ClickableSpan进行设置"></a>使用SpannableString， 通过ClickableSpan进行设置</h3><p>这种设置有一个好处， 就是我们可以监听到用户对超链接的点击。现在更常见的是实用其子类URLSpan， 可以传进去一个URL， 这样生成的data就会是这个URL， 而不是超链接内容本身了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">link_tv3 = (TextView) <span class="keyword">this</span>.findViewById(R.id.link_tv3); </div><div class="line">link_tv3.setMovementMethod(LinkMovementMethod.getInstance());<span class="comment">// 必须加</span></div><div class="line"><span class="keyword">final</span> SpannableString ss1 = <span class="keyword">new</span> SpannableString(<span class="string">"click1, click2, click3"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> cur = i * <span class="number">8</span>;</div><div class="line">    ss1.setSpan(<span class="keyword">new</span> ClickableSpan() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, ss1.subSequence(cur, cur + <span class="number">6</span>).toString(), Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</div><div class="line">            ds.setColor(Color.RED);</div><div class="line">            ds.setUnderlineText(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, cur, cur + <span class="number">6</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">&#125;</div><div class="line">link_tv3.setText(ss1);</div></pre></td></tr></table></figure>
<p>可以看到， 使用ClickableSpan或其子类， 不仅可以监听点击事件， 还可以自定义超链接样式。这里就把超链接样式改为了红色字体， 无下划线。</p>
<h3 id="自定义AutoLink"><a href="#自定义AutoLink" class="headerlink" title="自定义AutoLink"></a>自定义AutoLink</h3><p>在开发中，我们会遇到有一些内容，不属于系统默认的超链接格式， 但我们又需要它成为超链接，比如新浪微博的@内容。<br>这个时候，如果自己逐字符判断， 出现符合的文本字串， 就用ClickableSpan进行设置， 说起来不是不行， 但未免太过费时费力。如果有一种方法， 让系统能像处理默认的超链接那样， 为我们自动选出超链接内容， 岂不美哉。方法只有的， 只需要用一个正则表达式表明你需要的超链接的形式即可。<br>我之前不知道这个方法， 是从下面这篇博文中学习的。别人辛苦总结的，我就不贴在自己的博客里了。大家有需要就进去学习一下， 会有收获的。<br><a href="http://www.cnblogs.com/ryan1012/archive/2011/07/12/2104087.html" target="_blank" rel="external">Android应用实例之—使用Linkify + 正则式区分微博文本链接及跳转处理</a><br>这个方法生成的链接样式是系统自带的，我对其进行了改良， 更改了颜色， 去掉了下划线。可能会另开一篇博文进行分享。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【nginx】centos使用nginx实现ghost博客系统的反向代理]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90ghost%E3%80%91centos%E4%BD%BF%E7%94%A8nginx%E5%AE%9E%E7%8E%B0ghost%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>整个8月份都没有更新博客，一方面是自己在忙一些有的没的，另一方面，也是懒的缘故吧。。。<br>最近在玩基于nodejs的开源博客系统ghost，用阿里云服务器(centOS)搭建了一个属于自己的个人博客，还是挺有意思的。具体的nodejs + mysql + ghost配置教程，网上有很多，我基本上也是照着配置的，这里就不再详述。<br>这里主要介绍一下在配置完成之后，如果通过nginx实现反向代理，使得访问ghost时，可以忽略端口号，直接通过ip地址或者域名进行访问。</p>
<h3 id="使用nginx之前"><a href="#使用nginx之前" class="headerlink" title="使用nginx之前"></a>使用nginx之前</h3><p>在使用nginx之前，如果想要通过浏览器访问到服务器上的ghost，需要对ghost工程根目录下的配置文件config.js中的相关配置进行修改，将其中的ip地址从默认的127.0.0.1换成云服务器的地址。修改完成之后重启ghost，在本地可以通过ip地址+端口号成功访问，如图所示（2368是ghost的默认端口，可以在config.js里修改）：<br><img src="http://img.blog.csdn.net/20150911163136807" alt="这里写图片描述"></p>
<p>ok,这样可以成功访问了。但这样存在几个明显的弊端：<br>1、将阿里云的ip写死在ghost工程的config.js里，如果ip地址发生变化，就要不断修改config.js（多处）。<br>2、web访问的缺省端口号为80，这种端口号非80的地址，无法直接通过ip地址访问，也就等于无法直接使用域名访问。有人也许会说，那把ghost工程运行的端口号改成80不就可以 了。当然，这样也是可以的，但在工程里改来改去总归不好。<br>这个时候，如果可以在服务器上部署一个工具，使得用户访问80端口时，可以自动映射到相应的web工程端口（这里为ghost的2368）问题就能解决了。这个工具就是nginx。</p>
<h3 id="使用nginx"><a href="#使用nginx" class="headerlink" title="使用nginx"></a>使用nginx</h3><p>1、安装nginx:<br> yum install nginx (这里的环境为Centos，其它Linux环境可以将yum 替换为apt-get)<br>2、给nginx添加配置文件：<br>进入目录:etc/ nginx<br><img src="http://img.blog.csdn.net/20150911165132583" alt="这里写图片描述"><br>其中conf.d目录存放自定义配置文件，打开nginx目录下的nginx.conf文件，可以看到最后一行<br><img src="http://img.blog.csdn.net/20150911165450568" alt="这里写图片描述">，<br>即引用了conf.d目录下的所有配置文件。所以进入conf.d目录，创建新的配置文件ghost.conf,内容如图:<br><img src="http://img.blog.csdn.net/20150911170252590" alt="这里写图片描述"><br>很明显可以看出，这正是设置的80端口到本地2368端口的映射，<font color="#FF0000"><strong>而且由于直接映射的127.0.0.1，所以ghost工程的配置文件config.js也不需要修改了。</strong></font><br>这个时候直接启动nginx会报错，因为同样conf.d目录下的default.conf也是配置 的80端口的映射，会造成重复映射。我的解决办法是将default.conf重命名为default.conf.unenable， 这样其就 不会在nginx.conf中被引用了。</p>
<font color="#32CD32">特别说明：不同的系统环境可以安装的nginx目录结构有所不同，但只要记住一点，你创建的配置 文件能够在nginx.conf中被引用到就可以了。</font>

<p>3、启动nginx：</p>
<p><font color="#FF0000">如果之前修改了ghost工程目录config.js中的ip，将其恢复成127.0.0.1，当然，也可以在ghost.conf中将127.0.0.1换成服务器的外网ip。</font><br>命令：<br>service nginx start</p>
<p>这个时候如果ghost工程也是开启的，那就可以在本地直接通过ip地址（即 使用缺省端口80） 访问到了。<br><img src="http://img.blog.csdn.net/20150911172046687" alt="这里写图片描述"></p>
<p>域名和ip绑定了,也可以直接通过域名访问: <a href="http://lankton.cn" target="_blank" rel="external">http://lankton.cn</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】在不同的线程池中执行AsyncTask]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%AD%E6%89%A7%E8%A1%8CAsyncTask/</url>
      <content type="html"><![CDATA[<p>说起AsyncTask，有过Android开发经历的人应该都很熟悉，这是我们异步执行耗时操作的一个利器。<br>在一般情况下，如果有若干通过execute()方法执行的AsyncTask对象，这些的对象的异步操作会按顺序一个一个执行。这是因为使用execute方法的AsyncTask，会默认调用一个static的线程池变量THREAD_POOL_EXECUTOR进行管理。该线程池保证了各AsyncTask执行时的时序，即一次执行一个，先进先出。<br>(如果想要更加深入的了解AsyncTask的工作原理，推荐博文：<a href="http://blog.csdn.net/yanbober/article/details/46117397" target="_blank" rel="external">Android应用AsyncTask处理机制详解及源码分析</a></p>
<p><strong>在这种情况下，可能会遇到以下问题</strong>：<br>比如类似新浪微博的应用， 进入首页时启动了N个AsyncTask，来从网络加载首页所需要的图片。在首页的图片没有全部加载成功之前，点进某一条微博查看详细内容，同样使用了AsyncTask加载图片。这个时候我们可能会等待非常久的时间才能看到图片，因为需要等首页的那N个AsyncTask执行完，才会执行详细页面的AsyncTask。这样就可能造成很不好的体验。这种情况下，我们可能需要让首页和详细页面的AsyncTask在不同的线程池中执行，以避免这种在同一个默认线程池中执行导致出现的等待现象。</p>
<p><strong><em>如果要在非默认的线程池(THREAD_POOL_EXECUTOR)中执行AsyncTask</em></strong>，则需要使用<strong><em>excuteOnExecutor</em></strong>方法代替execute, 因为该方法中允许我们传入自己定义的线程池。</p>
<p>Java通过Executors类的四个方法，分别提供了4种不同的线程池。<br><strong><em>newCachedThreadPool</em></strong>  创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。<br><strong><em>newFixedThreadPool</em></strong>  创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<br><strong><em>newScheduledThreadPool</em></strong>  创建一个定长线程池，支持定时及周期性任务执行。<br><strong><em>newSingleThreadExecutor</em></strong>  创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。<br>（以上对四种方法的简介摘自Trinea: <a href="http://www.trinea.cn/android/java-android-thread-pool/" target="_blank" rel="external">介绍new Thread的弊端及Java四种线程池的使用,对Android同样适用</a>）</p>
<p>如果想让AsyncTask在不同的线程中执行，同时一个线程池中的AsyncTask依然一个一个执行，则可以选用singleThreadExecutor。<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ExecutorService loadExecutor = Executors.newSingleThreadExecutor();</div><div class="line">LoadSmallPicTask task = <span class="keyword">new</span> LoadSmallPicTask(photoUrl);</div><div class="line">task.executeOnExecutor(loadExecutor);</div></pre></td></tr></table></figure>
<p>在其他几种线程池中执行AsyncTask的方法跟上面相同。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】利用Activity生命周期监听应用前后台切换]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E5%88%A9%E7%94%A8Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9B%91%E5%90%AC%E5%BA%94%E7%94%A8%E5%89%8D%E5%90%8E%E5%8F%B0%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="实现介绍"><a href="#实现介绍" class="headerlink" title="实现介绍"></a>实现介绍</h1><p>在Android应用开发中，我们有时候需要监听到应用前后台的切换。这里提供一种思路，<strong>该思路并非原创</strong>，而是一种比较通用的办法，这里做一下介绍，附带实际过程中遇到的问题的解决。<br>具体实现思路是通过重写Activity的onResume方法和onStop方法实现，即在onStop里判断应用是否切换到后台，在onResume里判断是否切换到前台。<br>先回顾一下Activity生命周期：<br><img src="http://hi.csdn.net/attachment/201109/1/0_1314838777He6C.gif" alt="这里写图片描述"><br>当Activity完全不可见时，执行onStop。这个时候我们判断应用是否还在前台，这样就监听到了<strong><em>前台切后台</em></strong>，可以做相关处理，同时置全局标志位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        <span class="keyword">if</span>(!Utils.isForeground(<span class="keyword">this</span>))</div><div class="line">        &#123;</div><div class="line">            Utils.isActive = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>判断应用是否前台的方法isForeground如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*判断应用是否在前台*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isForeground</span><span class="params">(Context context)</span></span></div><div class="line">    &#123;</div><div class="line">        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">        List&lt;RunningTaskInfo&gt; tasks = am.getRunningTasks(<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (!tasks.isEmpty()) &#123;</div><div class="line">            ComponentName topActivity = tasks.get(<span class="number">0</span>).topActivity;</div><div class="line">            <span class="keyword">if</span> (topActivity.getPackageName().equals(context.getPackageName())) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当Activity恢复为可见时，执行onResume。这是就可以通过全局标志位isActive来判断场景。如果isActive为false，则Activity的出现时因为应用从后台切换到前台，这样就监听到了<strong><em>后台切前台</em></strong>，可以做相关处理，同时要记得恢复标志位isActive为true。如果为true，则代表仅仅是应用内部的视图切换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span>(!Utils.isActive)</div><div class="line">        &#123;</div><div class="line">            Utils.isActive = <span class="keyword">true</span>;</div><div class="line">            <span class="comment">/*一些处理，如弹出密码输入界面*/</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>由于是监听整个应用的前后台切换，所以上述重写可以实现在一个继承了Activity的父类<strong><em>BaseActivity</em></strong>里，直接继承Activity的类改为继承BaseActivity。如果有部分Activity是继承了FragmentActivity等而非直接继承Activity，同样建议新建一个父类，如BaseFragmentActivity等，在其中重写onResume，onStop，然后被继承。</p>
<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>在使用上述方法中，已经可以很好的实现监听应用前后台切换。而遇到的这个问题恰恰是由于在某个场景下，我不希望这种前后台切换被监听到。<br>上述代码，从注释里看到，onResume里检测到后台切前台，会让用户重新输入密码来保证安全，这样就出现了一个问题：<br>我在应用里调用了系统相机进行拍照，拍照完成之后应该回到应用进行图片展示，却直接弹出输入密码的界面。于是我每次拍完照都要手动输一次密码。<br>这种情况描述起来就是，虽然我调用了系统应用来拓展本应用的功能，但却不应该让用户感觉出他们曾经离开了这个应用。（可能描述比较混乱，但大概就是这个意思。。。）<br>解决办法：<br>Activity生命周期里还应该有一个回调方法，但这个方法在描述Activity的生命周期的时候经常被忽视掉：<strong><em>onActivityResult</em></strong>。通过试验，发现<strong><em>onActivityResult在onResume之前执行</em></strong>。所以解决办法如下：<br>通过startActivityForResult调用系统相机，传入requestCode。然后在onActivityResult里，判断requestCode。如果是从请求相机返回，则提前对前后台标志位isActive置true，这样onResume里就不会监听到后台切前台事件了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">       <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">       <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">       <span class="keyword">if</span>(Utils.REQUEST_CEMERA == requestCode) &#123;</div><div class="line">           <span class="comment">/*处理数据等*/</span></div><div class="line">           ......</div><div class="line">           Utils.isActive = <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这篇博文重点还是前面介绍如何监听前后台切换，后面解决的问题没有普遍性，可能对大家没什么参考价值，就当自己做一个记录了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】自定义相机的实现（支持连续拍照、前后摄像头切换、连续对焦）]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E6%94%AF%E6%8C%81%E8%BF%9E%E7%BB%AD%E6%8B%8D%E7%85%A7%E3%80%81%E5%89%8D%E5%90%8E%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%87%E6%8D%A2%E3%80%81%E8%BF%9E%E7%BB%AD%E5%AF%B9%E7%84%A6%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>这几天，写了一个自定义照相机的demo，支持连续拍照和摄像头切换。由于自己以前没接触过相关的编程，也算是一个学习的过程，在这里做一下记录，同时也分享出来，并附上源码和工程。<br>效果如图：<br><img src="http://img.blog.csdn.net/20150717011532595" alt="这里写图片描述"><br>左上角switch切换摄像头，右边snap按钮进行拍照。</p>
<h1 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h1><p>Android进行拍照，需要调用摄像头类android.hardware.Camera。而要进行预览，则需要用android.view.SurfaceView对每一帧的预览图进行显示。<br>实现自定义相机一般流程为：<br>1、用addCallback给SurfaceView设置Callback接口对象，实现其中三个回调方法：surfaceCreated、surfaceChanged、surfaceDestroyed。<br>在surfaceCreated中打开摄像头，获得Camera对象，并设置其在surfaceview上预览；<br>在surfaceChanged中设置摄像头的参数；<br>在surfaceDestroyed释放摄像头，否则会导致退出之后其他应用无法调用摄像头，包括系统相机。<br>2、点击拍照按钮时，调用Camera对象的takePicture方法，其第三个参数为PictureCallback接口对象，其中的onPictureTaken回调方法参数中有一个byte数组，存储了拍摄到的图片数据，在方法中保存到本地即可。<br>这样，一个基本可用、带预览的自定义相机就做好了。但这样还远远不够，因为会出现各种各样的问题。</p>
<h1 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h1><h2 id="预览变形"><a href="#预览变形" class="headerlink" title="预览变形"></a>预览变形</h2><p>这个是最头疼的问题。首先要知道3个宽高比：摄像头分辨率（PictureSize）宽高比、预览分辨率（PreviewSize）宽高比以及用作预览的SurfaceView的宽高比。如果要让预览不变形，这三个宽高比需要保持一致。这种一致性的保持在设置摄像头参数时进行。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCameraAndDisplay</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></div><div class="line">    &#123;</div><div class="line">        Camera.Parameters parameters = camera.getParameters();</div><div class="line">        <span class="comment">/*获取摄像头支持的PictureSize列表*/</span></div><div class="line">        List&lt;Camera.Size&gt; pictureSizeList = parameters.getSupportedPictureSizes();</div><div class="line">        <span class="comment">/*从列表中选取合适的分辨率*/</span></div><div class="line">        Size picSize = CameraUtils.getProperSize(pictureSizeList, ((<span class="keyword">float</span>)width)/height);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != picSize)</div><div class="line">        &#123;</div><div class="line">            parameters.setPictureSize(picSize.width, picSize.height);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            picSize = parameters.getPictureSize();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*获取摄像头支持的PreviewSize列表*/</span></div><div class="line">        List&lt;Camera.Size&gt; previewSizeList = parameters.getSupportedPreviewSizes();</div><div class="line">        Size preSize = CameraUtils.getProperSize(previewSizeList, ((<span class="keyword">float</span>)width)/height);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != preSize)</div><div class="line">        &#123;Log.v(<span class="string">"TestCameraActivityTag"</span>, preSize.width + <span class="string">","</span> + preSize.height);</div><div class="line">            parameters.setPreviewSize(preSize.width, preSize.height);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/*根据选出的PictureSize重新设置SurfaceView大小*/</span></div><div class="line">        <span class="keyword">float</span> w = picSize.width;</div><div class="line">        <span class="keyword">float</span> h = picSize.height;</div><div class="line">        surfaceView.setLayoutParams(<span class="keyword">new</span> RelativeLayout.LayoutParams( (<span class="keyword">int</span>)(height*(w/h)), height)); </div><div class="line">        </div><div class="line">        parameters.setJpegQuality(<span class="number">100</span>); <span class="comment">// 设置照片质量  </span></div><div class="line">        <span class="keyword">if</span> (parameters.getSupportedFocusModes().contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE))</div><div class="line">        &#123;</div><div class="line">            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">      </div><div class="line">        </div><div class="line">        camera.cancelAutoFocus();<span class="comment">//只有加上了这一句，才会自动对焦。  </span></div><div class="line">        camera.setDisplayOrientation(<span class="number">0</span>);</div><div class="line">        camera.setParameters(parameters);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>方法里传进去的参数为SurfaceView现在的宽高。在保证surfaceview宽高比不变的情况下（比如为了保证全屏预览），分别去寻找符合条件的PictureSize和PreviewSize。如果找不到，就返回默认宽高比（我设置为4:3）的PictureSize和PreviewSize， 同时为保证3个宽高比一致，surfaceView的宽高比也要重设。<br>提供寻找合适的PictureSize和PreviewSize方法的类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraUtils</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Size <span class="title">getProperSize</span><span class="params">(List&lt;Size&gt; sizeList, <span class="keyword">float</span> displayRatio)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//先对传进来的size列表进行排序</span></div><div class="line">        Collections.sort(sizeList, <span class="keyword">new</span> SizeComparator());</div><div class="line">        </div><div class="line">        Size result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span>(Size size: sizeList)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">float</span> curRatio =  ((<span class="keyword">float</span>)size.width) / size.height;</div><div class="line">            <span class="keyword">if</span>(curRatio - displayRatio == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                result = size;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == result)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(Size size: sizeList)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">float</span> curRatio =  ((<span class="keyword">float</span>)size.width) / size.height;</div><div class="line">                <span class="keyword">if</span>(curRatio == <span class="number">3f</span>/<span class="number">4</span>)</div><div class="line">                &#123;</div><div class="line">                    result = size;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Size</span>&gt;</span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Size lhs, Size rhs)</span> </span>&#123;</div><div class="line">            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">            Size size1 = lhs;</div><div class="line">            Size size2 = rhs;</div><div class="line">            <span class="keyword">if</span>(size1.width &lt; size2.width </div><div class="line">                    || size1.width == size2.width &amp;&amp; size1.height &lt; size2.height)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!(size1.width == size2.width &amp;&amp; size1.height == size2.height))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于不同的手机返回的支持分辨率的排序不一样（我手中一款联想从小到大排序，而另一部nexus 4从大到小排序），所以需要先对列表统一进行从小到大排序。这样，方法返回的就是符合条件宽高比的最大分辨率，可以保证照片的清晰度。</p>
<h2 id="照片方向错误"><a href="#照片方向错误" class="headerlink" title="照片方向错误"></a>照片方向错误</h2><p>解决方法是监听手机方向的改变。监听到方向发生变化，就调用Camera.Parameters 对象(Camera对象调用getParameters()方法获得)的setRotation方法重新设置成像方向。<br>监听的方法是，在Activity设置一个实现了OrientationEventListener接口 的对象，并调用其enable()方法激活。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IOrientationEventListener iOriListener;</div><div class="line">... ...</div><div class="line">iOriListener.enalbe();</div></pre></td></tr></table></figure>
<p>实现OrientationEventListener接口的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOrientationEventListener</span> <span class="keyword">extends</span> <span class="title">OrientationEventListener</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IOrientationEventListener</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context);</div><div class="line">            <span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOrientationChanged</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">            <span class="keyword">if</span>(ORIENTATION_UNKNOWN == orientation)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            CameraInfo info = <span class="keyword">new</span> CameraInfo();</div><div class="line">            Camera.getCameraInfo(camera_id, info);</div><div class="line">            orientation = (orientation + <span class="number">45</span>) / <span class="number">90</span> * <span class="number">90</span>;</div><div class="line">            <span class="keyword">int</span> rotation = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(info.facing == CameraInfo.CAMERA_FACING_FRONT)</div><div class="line">            &#123;</div><div class="line">                rotation = (info.orientation - orientation + <span class="number">360</span>) % <span class="number">360</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                rotation = (info.orientation + orientation) % <span class="number">360</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != camera)</div><div class="line">            &#123;</div><div class="line">                Camera.Parameters parameters = camera.getParameters();</div><div class="line">                parameters.setRotation(rotation);</div><div class="line">                camera.setParameters(parameters);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中设置rotation的公式由google官方提供。</p>
<h2 id="预览方向错误"><a href="#预览方向错误" class="headerlink" title="预览方向错误"></a>预览方向错误</h2><p>由于我设置了相机的Activity的方向为ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE，即横屏模式，所以没有遇到这个问题。<br>不过上一篇我转载的博文里，有提到相关问题的解决。相关代码摘录出来，供大家参考。以下代码放在surfaceview的callback中surfaceChanged方法里执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="comment">//如果是竖屏</span></div><div class="line"></div><div class="line">parameters.set(“orientation”, “portrait”);</div><div class="line"></div><div class="line"><span class="comment">//在2.2以上可以使用</span></div><div class="line"></div><div class="line"><span class="comment">//camera.setDisplayOrientation(90);</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">else</span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">parameters.set(“orientation”, “landscape”);</div><div class="line"></div><div class="line"><span class="comment">//在2.2以上可以使用</span></div><div class="line"></div><div class="line"><span class="comment">//camera.setDisplayOrientation(0);</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="连续对焦"><a href="#连续对焦" class="headerlink" title="连续对焦"></a>连续对焦</h2><p>通过连续对焦，可以拍出清楚的照片。代码在上面的代码段里出现过</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*先判断是否支持，否则可能报错*/</span></div><div class="line">        <span class="keyword">if</span> (parameters.getSupportedFocusModes().contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE))</div><div class="line">        &#123;</div><div class="line">            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);</div><div class="line">        &#125;</div><div class="line">        camera.cancelAutoFocus();<span class="comment">//只有加上了这一句，才会自动对焦。</span></div></pre></td></tr></table></figure>
<p>照相机Activity的代码就不全贴了，更具体的可以参考demo工程。</p>
<h1 id="工程下载"><a href="#工程下载" class="headerlink" title="工程下载"></a>工程下载</h1><p><a href="http://download.csdn.net/download/u013015161/8907491" target="_blank" rel="external">点此下载自定义相机demo工程</a>。</p>
<p>由于本人手中测试机型只有两台，运行了上述demo的朋友方便的话可以 告知下运行效果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】自定义控件实现可滑动的开关(switch)]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%BB%91%E5%8A%A8%E7%9A%84%E5%BC%80%E5%85%B3-switch/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>昨天晚上写了一个Android的滑动开关， 即SlideSwitch。效果如下：<br><img src="http://img.blog.csdn.net/20150701024352476" alt="这里写图片描述"></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现的思路其实很简单，监听控件上的touch事件，并不断刷新，让滑块在手指的位置上绘出，达到滑块跟着手指滑动的显示效果。<br>先看一下代码：<br>SlideSwitch.java (7月3日有修改：在touch事件里调用onStateChangedListener前增加判空)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.incell.view;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlideSwitch</span> <span class="keyword">extends</span> <span class="title">View</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG); <span class="comment">//抗锯齿</span></div><div class="line">    </div><div class="line">    <span class="keyword">boolean</span> isOn = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">float</span> curX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> centerY; <span class="comment">//y固定</span></div><div class="line">    <span class="keyword">float</span> viewWidth;</div><div class="line">    <span class="keyword">float</span> radius;</div><div class="line">    <span class="keyword">float</span> lineStart; <span class="comment">//直线段开始的位置（横坐标，即</span></div><div class="line">    <span class="keyword">float</span> lineEnd; <span class="comment">//直线段结束的位置（纵坐标</span></div><div class="line">    <span class="keyword">float</span> lineWidth;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> SCALE = <span class="number">4</span>; <span class="comment">// 控件长度为滑动的圆的半径的倍数</span></div><div class="line">    OnStateChangedListener onStateChangedListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SlideSwitch</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SlideSwitch</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SlideSwitch</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        curX = event.getX();</div><div class="line">        <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_UP)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(curX &gt; viewWidth / <span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line">                curX = lineEnd;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">false</span> == isOn)</div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//只有状态发生改变才调用回调函数， 下同</span></div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != onStateChangedListener)</div><div class="line">                    &#123;</div><div class="line">                        onStateChangedListener.onStateChanged(<span class="keyword">true</span>);</div><div class="line">                    &#125;</div><div class="line">                    isOn = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                curX = lineStart;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">true</span> == isOn)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != onStateChangedListener)</div><div class="line">                    &#123;</div><div class="line">                        onStateChangedListener.onStateChanged(<span class="keyword">false</span>);</div><div class="line">                    &#125;</div><div class="line">                    isOn = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*通过刷新调用onDraw*/</span></div><div class="line">        <span class="keyword">this</span>.postInvalidate();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        <span class="comment">/*保持宽是高的SCALE / 2倍， 即圆的直径*/</span></div><div class="line">        <span class="keyword">this</span>.setMeasuredDimension(<span class="keyword">this</span>.getMeasuredWidth(), <span class="keyword">this</span>.getMeasuredWidth() * <span class="number">2</span> / SCALE);</div><div class="line">        viewWidth = <span class="keyword">this</span>.getMeasuredWidth();</div><div class="line">        radius = viewWidth / SCALE;</div><div class="line">        lineWidth = radius * <span class="number">2f</span>; <span class="comment">//直线宽度等于滑块直径</span></div><div class="line">        curX = radius;</div><div class="line">        centerY = <span class="keyword">this</span>.getMeasuredWidth() / SCALE; <span class="comment">//centerY为高度的一半</span></div><div class="line">        lineStart = radius;</div><div class="line">        lineEnd = (SCALE - <span class="number">1</span>) * radius;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        </div><div class="line">        <span class="comment">/*限制滑动范围*/</span></div><div class="line">        curX = curX &gt; lineEnd?lineEnd:curX;</div><div class="line">        curX = curX &lt; lineStart?lineStart:curX;</div><div class="line">        </div><div class="line">        <span class="comment">/*划线*/</span></div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(lineWidth);</div><div class="line">        <span class="comment">/*左边部分的线，绿色*/</span></div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        canvas.drawLine(lineStart, centerY, curX, centerY, mPaint);</div><div class="line">        <span class="comment">/*右边部分的线，灰色*/</span></div><div class="line">        mPaint.setColor(Color.GRAY);</div><div class="line">        canvas.drawLine(curX, centerY, lineEnd, centerY, mPaint);</div><div class="line">        </div><div class="line">        <span class="comment">/*画圆*/</span></div><div class="line">        <span class="comment">/*画最左和最右的圆，直径为直线段宽度， 即在直线段两边分别再加上一个半圆*/</span></div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        mPaint.setColor(Color.GRAY);</div><div class="line">        canvas.drawCircle(lineEnd, centerY, lineWidth / <span class="number">2</span>, mPaint);  </div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        canvas.drawCircle(lineStart, centerY, lineWidth / <span class="number">2</span>, mPaint);</div><div class="line">        <span class="comment">/*圆形滑块*/</span></div><div class="line">        mPaint.setColor(Color.LTGRAY);</div><div class="line">        canvas.drawCircle(curX, centerY, radius , mPaint);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*设置开关状态改变监听器*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnStateChangedListener</span><span class="params">(OnStateChangedListener o)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.onStateChangedListener = o;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*内部接口，开关状态改变监听器*/</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnStateChangedListener</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(<span class="keyword">boolean</span> state)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释应该很详细了。主要有以下几点。<br>1、重写了onMeasure方法，<strong>使控件高度依赖于控件的宽度</strong>。这样不论在布局文件中如何设置，总能<strong>保证控件的宽高比</strong>。<br>2、控制好滑块的活动范围<br>3、定义内部接口OnStateChangedListener，并在自定义控件里定义了其对象以及从外部赋值的方法setOnStateChangedListener，以便<strong>对开关状态更改事件进行监听并调用回调</strong>。</p>
<h1 id="使用及Demo"><a href="#使用及Demo" class="headerlink" title="使用及Demo"></a>使用及Demo</h1><p>在布局文件中添加该控件即可使用。Demo效果为动图展示效果（demo里颜色为绿色，动图为蓝色是因为绿色会导致截取gif时出问题，临时更改的）。<br>Demo中布局文件如下：<br>activity_main.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.example.slideswitchexample.SlideSwitch</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/slide_switch"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Demo中Activity代码如下：<br>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.slideswitchexample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.slideswitchexample.SlideSwitch.OnStateChangedListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    SlideSwitch sSwitch;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        sSwitch = (SlideSwitch) <span class="keyword">this</span>.findViewById(R.id.slide_switch);</div><div class="line">        sSwitch.setOnStateChangedListener(<span class="keyword">new</span> OnStateChangedListener()&#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(<span class="keyword">boolean</span> state)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">true</span> == state)</div><div class="line">                &#123;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"开关已打开"</span>, <span class="number">1000</span>).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"开关已关闭"</span>, <span class="number">1000</span>).show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://download.csdn.net/detail/u013015161/8856597" target="_blank" rel="external">点此下载Demo工程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】自定义控件实现九宫格解锁]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%B9%9D%E5%AE%AB%E6%A0%BC%E8%A7%A3%E9%94%81/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这两天写了一个九宫格锁屏的控件，实现了九宫格锁屏的设置和解锁。该控件没有使用任何图片资源，显示的内容（包括点、圆、线等）全部由画笔绘制，所以可以自由复用。<br>使用效果图：<br><img src="http://img.blog.csdn.net/20150629234556437" alt="这里写图片描述"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先上代码吧。<br>自定义九宫格控件：LocusPassView</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.locusexample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.PointF;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocusPassView</span> <span class="keyword">extends</span> <span class="title">View</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG); <span class="comment">//抗锯齿</span></div><div class="line">    <span class="keyword">private</span> PointF[][] mPoints = <span class="keyword">new</span> PointF[<span class="number">3</span>][<span class="number">3</span>];</div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; pathNodes = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> centerRadius; <span class="comment">//每个实心点的半径</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> circleRadius; <span class="comment">//空心圆半径</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> viewWidth;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> viewHeight;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> curX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> curY = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> OnCompleteListener onCompleteListener = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocusPassView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocusPassView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocusPassView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN </div><div class="line">                || event.getAction() == MotionEvent.ACTION_MOVE )</div><div class="line">        &#123;</div><div class="line">            curX = event.getX();</div><div class="line">            curY = event.getY();</div><div class="line">            detectGetPoint(curX, curY);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_UP)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(pathNodes.size() &gt;= <span class="number">3</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != onCompleteListener)</div><div class="line">                &#123;</div><div class="line">                    onCompleteListener.onComplete(pathToString(pathNodes));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            pathNodes.clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.postInvalidate();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        viewWidth = <span class="keyword">this</span>.getMeasuredWidth();</div><div class="line">        viewHeight = <span class="keyword">this</span>.getMeasuredHeight();</div><div class="line">        centerRadius = viewWidth / <span class="number">24</span>;</div><div class="line">        circleRadius = viewWidth / <span class="number">6</span> * <span class="number">3</span> / <span class="number">5</span>;</div><div class="line">        drawPoints(canvas);</div><div class="line">        drawLines(canvas, curX, curY);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawPoints</span><span class="params">(Canvas canvas)</span></span></div><div class="line">    &#123;</div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</div><div class="line">            &#123;</div><div class="line">                mPoints[i][j] = <span class="keyword">new</span> PointF((<span class="keyword">int</span>)(viewWidth / <span class="number">6</span> + viewWidth / <span class="number">3</span> * j),</div><div class="line">                        (<span class="keyword">int</span>)(viewHeight / <span class="number">6</span> + viewHeight / <span class="number">3</span> * i));</div><div class="line">                canvas.drawCircle(mPoints[i][j].x, mPoints[i][j].y, centerRadius, mPaint);</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(centerRadius / <span class="number">6</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pathNodes.size(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> m = pathNodes.get(i) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">int</span> n = pathNodes.get(i) % <span class="number">3</span>;</div><div class="line">            canvas.drawCircle(mPoints[m][n].x, mPoints[m][n].y, circleRadius, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(Canvas canvas, <span class="keyword">float</span> curX, <span class="keyword">float</span> curY)</span></span></div><div class="line">    &#123;</div><div class="line">        mPaint.setStrokeWidth(centerRadius / <span class="number">2</span>);</div><div class="line">        PointF lastPointF = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pathNodes.size(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> m = pathNodes.get(i) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">int</span> n = pathNodes.get(i) % <span class="number">3</span>;</div><div class="line">            PointF curPointF  = mPoints[m][n];</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != lastPointF)</div><div class="line">            &#123;</div><div class="line">                canvas.drawLine(lastPointF.x, lastPointF.y, curPointF.x, curPointF.y, mPaint);</div><div class="line">            &#125;</div><div class="line">            lastPointF = curPointF;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != lastPointF)</div><div class="line">        &#123;</div><div class="line">            canvas.drawLine(lastPointF.x, lastPointF.y, curX, curY, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detectGetPoint</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>((mPoints[i][j].x - x) * (mPoints[i][j].x - x) </div><div class="line">                        + (mPoints[i][j].y - y) * (mPoints[i][j].y - y) </div><div class="line">                        &lt; centerRadius * centerRadius * <span class="number">4</span>) </div><div class="line">                &#123;</div><div class="line">                    <span class="comment">/*触点进入某一中心点范围, 半径平方 乘以4 触点更大  容易操作*/</span></div><div class="line">                    <span class="keyword">int</span> nodeNum =  i * <span class="number">3</span> + j;</div><div class="line">                    <span class="keyword">if</span>(!pathNodes.contains(nodeNum))</div><div class="line">                    &#123;</div><div class="line">                        pathNodes.add(nodeNum);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                    </div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pathToString</span><span class="params">(List&lt;Integer&gt; list)</span></span></div><div class="line">    &#123;</div><div class="line">        String des = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)</div><div class="line">        &#123;</div><div class="line">            des += list.get(i).toString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> des;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//设置完成事件监听回调</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCompleteListener</span><span class="params">(OnCompleteListener o)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.onCompleteListener = o;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnCompleteListener</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(String pass)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码里的注释应该是比较清晰的。主要思路就是, 依次将9个点映射为0到8的整型。在手指滑动的过程中，用一个Integer类型的List保存滑过的点，并且通过PostInvalidate方法不断调用onDraw()进行重绘。包括9个点的绘制、滑过点周围圆圈的绘制以及点之间（包括手指现在的触点）连线的绘制。</p>
<p>同时编写了一个内部接口OnCompleteListener。自定义View中有该接口的对象， 由setOnCompleteListener()方法传入。在连接了3个或3个以上圆点的时候，手指抬起，调用其中的回调方法onComplete(String )。其中传入的String即为各选中点映射的整型组成的字符串。外部可对该字符串进行处理，或设置，或比对。</p>
<h2 id="使用及Demo"><a href="#使用及Demo" class="headerlink" title="使用及Demo"></a>使用及Demo</h2><p>使用方法很简单，直接在布局文件里添加就好了。<br>布局文件：activity_locus.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.example.locusexample.LocusPassView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/locusview"</span> </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"50dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"50dp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>设置密码的Activity: LocusSetActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.locusexample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.locusexample.LocusPassView.OnCompleteListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.SharedPreferences;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocusSetActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="keyword">this</span>.setContentView(R.layout.activity_locus);</div><div class="line">        <span class="keyword">final</span> SharedPreferences sp = <span class="keyword">this</span>.getSharedPreferences(<span class="string">"data"</span>, Context.MODE_PRIVATE);</div><div class="line">        LocusPassView locusView = (LocusPassView) <span class="keyword">this</span>.findViewById(R.id.locusview);</div><div class="line">        locusView.setOnCompleteListener(<span class="keyword">new</span> OnCompleteListener()&#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(String pass)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                Toast.makeText(LocusSetActivity.<span class="keyword">this</span>, <span class="string">"已设置密码："</span> + pass, <span class="number">3000</span>).show();</div><div class="line">                sp.edit().putString(<span class="string">"password"</span>, pass).commit();</div><div class="line">                LocusSetActivity.<span class="keyword">this</span>.finish();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进行解锁的Activity: LocusUnlockActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.locusexample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.locusexample.LocusPassView.OnCompleteListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.SharedPreferences;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocusUnlockActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="keyword">this</span>.setContentView(R.layout.activity_locus);</div><div class="line">        <span class="keyword">final</span> SharedPreferences sp = <span class="keyword">this</span>.getSharedPreferences(<span class="string">"data"</span>, Context.MODE_PRIVATE);</div><div class="line">        <span class="keyword">final</span> String realPass = sp.getString(<span class="string">"password"</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == realPass)</div><div class="line">        &#123;</div><div class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"请先设置密码"</span>, <span class="number">3000</span>).show();</div><div class="line">            <span class="keyword">this</span>.finish();</div><div class="line">        &#125;</div><div class="line">        LocusPassView locusView = (LocusPassView) <span class="keyword">this</span>.findViewById(R.id.locusview);</div><div class="line">        locusView.setOnCompleteListener(<span class="keyword">new</span> OnCompleteListener()&#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(String pass)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                Toast.makeText(LocusUnlockActivity.<span class="keyword">this</span>, <span class="string">"输入密码："</span> + pass, <span class="number">3000</span>).show();</div><div class="line">                <span class="keyword">if</span>(pass.equals(realPass))</div><div class="line">                &#123;</div><div class="line">                    Toast.makeText(LocusUnlockActivity.<span class="keyword">this</span>, <span class="string">"密码正确"</span>, <span class="number">3000</span>).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    Toast.makeText(LocusUnlockActivity.<span class="keyword">this</span>, <span class="string">"密码错误"</span>, <span class="number">3000</span>).show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://download.csdn.net/detail/u013015161/8852407" target="_blank" rel="external">点击下载完整的demo工程（即效果图所示）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Android】一个浏览图片的Android库的实现，可以移动、缩放图片以及滑动切换]]></title>
      <url>http://lankton.github.io/2016/07/09/%E3%80%90Android%E3%80%91%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%9B%BE%E7%89%87%E7%9A%84Android%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%A7%BB%E5%8A%A8%E3%80%81%E7%BC%A9%E6%94%BE%E5%9B%BE%E7%89%87%E4%BB%A5%E5%8F%8A%E6%BB%91%E5%8A%A8%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近写了一个Library， 用于实现在Android设备上对大图的浏览。已经实现的功能有：<br>1、移动、缩放图片<br>2、双击快速放大或缩小图片<br>3、单击退出浏览<br>4、左右滑动切换图片。<br>目前还只实现了展示SD卡里图片的功能，后续应该补完，使其可以展示网络图片等。<br>代码已经在Github上开源， 地址为：<br><a href="https://github.com/lankton/lanimagebrowser" target="_blank" rel="external">https://github.com/lankton/lanimagebrowser</a></p>
<p>展示：<br>图片切换<br><img src="http://img.blog.csdn.net/20150625192840175" width="200px"></p>
<p>图片缩放<br><img src="http://img.blog.csdn.net/20150625193024601" width="200px"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现的思路很简单。图片的缩放、移动等操作通过自定义ImageView实现，这些自定义ImageView通过Fragment来展现。同时，这些Fragment被绑定到ViewPager上，从而实现对图片的切换。下面简单讲一下几个比较关键的地方。</p>
<ol>
<li>自定义ImageView<br>主要重写了OnTouchEvent，来监听各种手势事件。同时重写了OnMeasure和OnLayout，来初始化图片在ImageView的显示。直接上代码吧。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lankton.imagebrowser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Matrix;</div><div class="line"><span class="keyword">import</span> android.graphics.PointF;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</div><div class="line"></div><div class="line">    Context context;</div><div class="line">    </div><div class="line">    <span class="keyword">float</span> originDistance;</div><div class="line">    <span class="keyword">float</span> curDistance;</div><div class="line">    <span class="keyword">float</span> scale; <span class="comment">//在上次基础上缩放</span></div><div class="line">    <span class="keyword">float</span> curScale = <span class="number">1</span>;</div><div class="line">    <span class="keyword">float</span> beginZoomScale; <span class="comment">//开始缩放时的scale</span></div><div class="line">    </div><div class="line">    Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">    Matrix savedMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">    PointF curPoint = <span class="keyword">new</span> PointF();</div><div class="line">    PointF lastPoint = <span class="keyword">new</span> PointF();</div><div class="line">    <span class="keyword">public</span> BitmapSize bitmapSize;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Timer closeTimer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isClose;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> BOUNDS = <span class="number">30</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> originX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> originY;</div><div class="line">    </div><div class="line">    <span class="keyword">float</span> smallScale;</div><div class="line">    <span class="keyword">float</span> bigScale;</div><div class="line">    <span class="keyword">boolean</span> isToBig = <span class="keyword">true</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BrowserImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"><span class="comment">//        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.sb);  </span></div><div class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BrowserImageView</span><span class="params">(Context c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>(c);</div><div class="line">        <span class="keyword">this</span>.context = c;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBitmapSize</span><span class="params">(BitmapSize b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.bitmapSize = b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">switch</span>(event.getAction() &amp; MotionEvent.ACTION_MASK)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            curPoint.x = event.getX();</div><div class="line">            curPoint.y = event.getY();</div><div class="line">            savedMatrix.set(matrix);  </div><div class="line">            isClose = <span class="keyword">true</span>;</div><div class="line">            originX = curPoint.x;</div><div class="line">            originY = curPoint.y;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</div><div class="line">            isClose = <span class="keyword">false</span>;</div><div class="line">            originDistance = getDistance(event.getX(<span class="number">0</span>), event.getY(<span class="number">0</span>),</div><div class="line">                    event.getX(<span class="number">1</span>), event.getY(<span class="number">1</span>));</div><div class="line">            beginZoomScale = curScale;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            <span class="keyword">if</span>(isOutBounds(originX, originY, event.getX(<span class="number">0</span>), event.getY(<span class="number">0</span>)))</div><div class="line">            &#123;</div><div class="line">                isClose = <span class="keyword">false</span>;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(event.getPointerCount() == <span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line">                curDistance = getDistance(event.getX(<span class="number">0</span>), event.getY(<span class="number">0</span>),</div><div class="line">                        event.getX(<span class="number">1</span>), event.getY(<span class="number">1</span>));</div><div class="line">                scale = curDistance / originDistance;</div><div class="line">                curScale = beginZoomScale * scale;</div><div class="line">                matrix.set(savedMatrix); </div><div class="line">                matrix.postScale(scale,  scale</div><div class="line">                        , (event.getX(<span class="number">0</span>) + event.getX(<span class="number">1</span>))/<span class="number">2</span></div><div class="line">                        , (event.getY(<span class="number">0</span>) + event.getY(<span class="number">1</span>))/<span class="number">2</span>);</div><div class="line">                <span class="keyword">this</span>.setImageMatrix(matrix);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(event.getPointerCount() == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                lastPoint.x = curPoint.x;</div><div class="line">                lastPoint.y = curPoint.y;</div><div class="line">                curPoint.x = event.getX();</div><div class="line">                curPoint.y = event.getY();</div><div class="line">                matrix.postTranslate(curPoint.x - lastPoint.x, curPoint.y - lastPoint.y);</div><div class="line">                <span class="keyword">this</span>.setImageMatrix(matrix); </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            <span class="keyword">if</span>(isClose)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> == closeTimer)</div><div class="line">                &#123;</div><div class="line">                    closeTimer = <span class="keyword">new</span> Timer();</div><div class="line">                    TimerTask task = <span class="keyword">new</span> TimerTask()&#123;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                            ((Activity) context).finish();</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                    &#125;; </div><div class="line">                    closeTimer.schedule(task, <span class="number">500</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;<span class="comment">//double click</span></div><div class="line">                    closeTimer.cancel();</div><div class="line">                    closeTimer = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span>(isToBig)</div><div class="line">                    &#123;</div><div class="line">                        matrix.postScale(bigScale / curScale , bigScale / curScale, event.getX(), event.getY());</div><div class="line">                        curScale = bigScale;</div><div class="line">                        <span class="keyword">this</span>.setImageMatrix(matrix); </div><div class="line">                        isToBig = <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        matrix.postScale(smallScale / curScale, smallScale / curScale, event.getX(), event.getY());</div><div class="line">                        curScale = smallScale;</div><div class="line">                        <span class="keyword">this</span>.setImageMatrix(matrix); </div><div class="line">                        isToBig = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</div><div class="line">            <span class="keyword">if</span>(<span class="number">1</span> == event.getActionIndex())</div><div class="line">            &#123;</div><div class="line">                curPoint.x = event.getX(<span class="number">0</span>);</div><div class="line">                curPoint.y = event.getY(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                curPoint.x = event.getX(<span class="number">1</span>);</div><div class="line">                curPoint.y = event.getY(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            savedMatrix.set(matrix);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  </div><div class="line">    <span class="comment">/*获得两点间距离*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getDistance</span><span class="params">(<span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">float</span> disX = x1 - x2;</div><div class="line">        <span class="keyword">float</span> disY = y1 - y2;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)Math.sqrt(disX * disX + disY * disY);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*设置图片以合适大小居中*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">center</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> viewWidth = <span class="keyword">this</span>.getMeasuredWidth();</div><div class="line">        <span class="keyword">int</span> viewHeight = <span class="keyword">this</span>.getMeasuredHeight();</div><div class="line">        <span class="keyword">int</span> bitmapWidth = bitmapSize.width;</div><div class="line">        <span class="keyword">int</span> bitmapHeight = bitmapSize.height;</div><div class="line">        <span class="keyword">float</span> scale = <span class="number">1</span>;</div><div class="line">        <span class="comment">//先居中</span></div><div class="line">        matrix.setTranslate((viewWidth - bitmapWidth)/<span class="number">2f</span>, (viewHeight - bitmapHeight)/<span class="number">2f</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//图片宽高有大于容器, 则需要再进行一次缩放处理</span></div><div class="line">        <span class="keyword">if</span>(bitmapWidth &gt; viewWidth || bitmapHeight &gt; viewHeight)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((<span class="keyword">float</span>)bitmapWidth / bitmapHeight &gt; (<span class="keyword">float</span>)viewWidth / viewHeight)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//宽、高比大于容器，以宽占满容器宽度为准，进行缩放</span></div><div class="line">                scale = (<span class="keyword">float</span>)viewWidth / bitmapWidth;               </div><div class="line">                matrix.postScale(scale, scale, (<span class="keyword">float</span>)viewWidth / <span class="number">2</span>, (<span class="keyword">float</span>)viewHeight / <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//高、宽比大于容器， 以高占满容器高度为准，进行缩放</span></div><div class="line">                scale = (<span class="keyword">float</span>)viewHeight / bitmapHeight;</div><div class="line">                matrix.postScale(scale, scale, (<span class="keyword">float</span>)viewWidth / <span class="number">2</span>, (<span class="keyword">float</span>)viewHeight / <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        smallScale = scale;</div><div class="line">        bigScale = smallScale * <span class="number">2</span>;</div><div class="line">        <span class="keyword">this</span>.setImageMatrix(matrix);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        refresh();</div><div class="line"><span class="comment">//        center();</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == bitmapSize)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        center();</div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    <span class="comment">/*刷新matrix*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        matrix.reset();</div><div class="line">        <span class="keyword">this</span>.setImageMatrix(matrix);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapSize</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> width;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> height;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BitmapSize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>.width = width;</div><div class="line">            <span class="keyword">this</span>.height = height;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*手指在屏幕上移动超过范围才被判定为滑动，否则影响点击事件的判断*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOutBounds</span><span class="params">(<span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2 )</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Math.abs(x2 - x1) *  Math.abs(x2 - x1) </div><div class="line">                +  Math.abs(y2 - y1) * Math.abs(y2 - y1) &gt; BOUNDS * BOUNDS; </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，图片的位移及大小变换是通过修改matrix实现的，所以使用时该自定义View的scaleType被设为“matrix”。</p>
<ol>
<li>Fragment编写<br>这个，也还是直接上代码吧。。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lankton.imagebrowser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.lankton.imagebrowser.BrowserImageView.BitmapSize;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.R;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.os.AsyncTask;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.util.LruCache;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView.ScaleType;</div><div class="line"><span class="keyword">import</span> android.widget.RelativeLayout;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> BrowserImageView img;</div><div class="line">    <span class="keyword">private</span> String path;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pos;</div><div class="line">    <span class="keyword">private</span> Timer clickTimer;</div><div class="line">    </div><div class="line">    LruCache&lt;String, Bitmap&gt; cache;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IFragment</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IFragment</span><span class="params">(String path, <span class="keyword">int</span> pos, LruCache&lt;String, Bitmap&gt; cache)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.path = path;</div><div class="line">        <span class="keyword">this</span>.pos = pos;</div><div class="line">        <span class="keyword">this</span>.cache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Log.v(<span class="string">"browser"</span>, <span class="string">""</span>+pos+<span class="string">" onCreateview"</span>);</div><div class="line">        RelativeLayout relativeLayout = <span class="keyword">new</span> RelativeLayout(<span class="keyword">this</span>.getActivity());</div><div class="line">        relativeLayout.setBackgroundColor(<span class="keyword">this</span>.getResources().getColor(R.color.black));</div><div class="line">        BrowserImageView bimg = <span class="keyword">new</span> BrowserImageView(<span class="keyword">this</span>.getActivity());</div><div class="line">        RelativeLayout.LayoutParams lp = <span class="keyword">new</span> RelativeLayout.LayoutParams(</div><div class="line">                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        lp.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);</div><div class="line">        bimg.setScaleType(ScaleType.MATRIX);</div><div class="line">        bimg.setClickable(<span class="keyword">true</span>);</div><div class="line">        relativeLayout.addView(bimg, lp);</div><div class="line">        img = bimg;</div><div class="line">        img.setOnClickListener(<span class="keyword">new</span> OnClickListener()&#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                Toast.makeText(IFragment.<span class="keyword">this</span>.getActivity(), <span class="string">"click"</span>, <span class="number">3000</span>).show();</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> == clickTimer)</div><div class="line">                &#123;</div><div class="line">                    clickTimer = <span class="keyword">new</span> Timer();</div><div class="line">                    TimerTask task = <span class="keyword">new</span> TimerTask()&#123;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                            IFragment.<span class="keyword">this</span>.getActivity().finish();</div><div class="line">                            Toast.makeText(IFragment.<span class="keyword">this</span>.getActivity(), <span class="string">"close"</span>, <span class="number">3000</span>).show();</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                    &#125;; </div><div class="line">                    clickTimer.schedule(task, <span class="number">200</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    clickTimer.cancel();</div><div class="line">                    clickTimer = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        TextView t = <span class="keyword">new</span> TextView(<span class="keyword">this</span>.getActivity());</div><div class="line">        t.setText(<span class="string">""</span> + pos);</div><div class="line">        t.setTextSize(<span class="number">30</span>);</div><div class="line">        t.setTextColor(<span class="keyword">this</span>.getResources().getColor(R.color.white));</div><div class="line">        relativeLayout.addView(t,lp);</div><div class="line">        <span class="keyword">return</span> relativeLayout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Log.v(<span class="string">"browser"</span>, <span class="string">""</span>+pos+<span class="string">" onDestroy"</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Log.v(<span class="string">"browser"</span>, <span class="string">""</span>+pos+<span class="string">" onResume"</span>);</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        setBitmap();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Log.v(<span class="string">"browser"</span>, <span class="string">""</span>+pos+<span class="string">" onStop"</span>);</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBitmap</span><span class="params">()</span> </span>&#123;</div><div class="line">        Bitmap bitmap = IFragment.<span class="keyword">this</span>.getBitmapFromMemCache(path);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == bitmap)</div><div class="line">        &#123;</div><div class="line">            LoadBitmapTask task = <span class="keyword">new</span> LoadBitmapTask();</div><div class="line">            task.execute();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            BitmapSize bs = img.new BitmapSize(bitmap.getWidth(), bitmap.getHeight());</div><div class="line">            img.setBitmapSize(bs);</div><div class="line">            img.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemoryCache</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getBitmapFromMemCache(key) == <span class="keyword">null</span>) &#123;</div><div class="line">            cache.put(key, bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemCache</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cache.get(key);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LoadBitmapTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt;</span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">            Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                FileInputStream fin = <span class="keyword">new</span> FileInputStream(path);</div><div class="line">                <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">                options.inSampleSize = <span class="number">2</span>;</div><div class="line">                options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">                bitmap = BitmapFactory.decodeStream(fin, <span class="keyword">null</span>, options);</div><div class="line">                IFragment.<span class="keyword">this</span>.addBitmapToMemoryCache(path, bitmap);</div><div class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap result)</span> </span>&#123;</div><div class="line">            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">            <span class="keyword">super</span>.onPostExecute(result);</div><div class="line">            BitmapSize bs = img.new BitmapSize(result.getWidth(), result.getHeight());</div><div class="line">            img.setBitmapSize(bs);</div><div class="line">            img.setImageBitmap(result);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于工程要被拿来当作library，可以看到在onCreateView通过代码生成自定义的BrowserImageView并被设置到布局里。BrowserImageView的scaleType被设置成“matrix”。加载时，通过AsyncTask异步加载图片。</p>
<ol>
<li>图片缓存<br>通过LruCache动态进行内存管理，否则很高概率出现OOM。缓存初始化放在了ViewPager的Adapter里：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lankton.imagebrowser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class="line"><span class="keyword">import</span> android.support.v4.util.LruCache;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span></span>&#123;</div><div class="line">    List&lt;String&gt; pathList;</div><div class="line">    LruCache&lt;String, Bitmap&gt; cache;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IPagerAdapter</span><span class="params">(FragmentManager fm, List&lt;String&gt; pathList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        <span class="keyword">this</span>.pathList = pathList;</div><div class="line">        </div><div class="line">        <span class="comment">/*init LruCache*/</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);Log.v(<span class="string">"diskcache"</span>,<span class="string">"mem : "</span> + maxMemory);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">//maxMemory / 8;</span></div><div class="line">        cache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize);</div><div class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        IFragment f = <span class="keyword">new</span> IFragment(pathList.get(position),position, cache);</div><div class="line">        <span class="keyword">return</span> f;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> pathList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在之前介绍Fragment的代码里可以看到如何使用LruCache的，不再赘述了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>本Library主要提供了一个PagerAdapter。使用时，让该工程作为Library被需要的工程引用即可。<br>使用时的代码如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        // TODO Auto-generated method stub</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        this.setContentView(R.layout.lanactivity_browserimage);</div><div class="line">        viewPager = (ViewPager) this.findViewById(R.id.viewpager);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        photos = this.getIntent().getStringArrayListExtra(&quot;photoList&quot;);</div><div class="line">        index = this.getIntent().getIntExtra(&quot;index&quot;, 0);</div><div class="line">        </div><div class="line">        adapter = new IPagerAdapter(this.getSupportFragmentManager(), photos);</div><div class="line">        viewPager.setAdapter(adapter);</div><div class="line">        viewPager.setCurrentItem(index);</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在你的布局文件里放置一个普通的ViewPager，然后使用类库提供的IPagerAdapter即可。需要传进Adapter的参数，即photos，是你本地文件的路径列表。之后该Activity就可以拿来进行图片浏览了。</p>
<p>就先介绍到这里吧， 这个Library目前还有不少需要改进和提升的地方，请多多指教。</p>
<p>最后在申明一次开源地址， 代码都可以从这里获取：<br><a href="https://github.com/lankton/lanimagebrowser" target="_blank" rel="external">https://github.com/lankton/lanimagebrowser</a></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>###解决viewpager和imageview的滑动冲突 2015 6 28###<br>之前版本，想直接左右拖动图片时(eg 图片放大状态，想查看未显示的部分)，会直接出发viewpager的翻页事件。<br>解决方案：手指在imageview上move时，根据条件判断是否应该禁止viewpager的滑动事件。参考链接：<a href="http://www.cnblogs.com/xitang/archive/2013/06/22/3150380.html" target="_blank" rel="external">requestDisallowInterceptTouchEvent</a><br>参考里viewpager直接传递进子view， 其实不用，可以直接通过getParent()获得。同时本library的情况要分别考虑左划和右划。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Rect rectTemp = <span class="keyword">this</span>.getDrawable().getBounds(); </div><div class="line">                matrix.getValues(values);</div><div class="line">                <span class="keyword">int</span> leftPos = (<span class="keyword">int</span>)values[<span class="number">2</span>];</div><div class="line">                <span class="keyword">int</span> rightPos = (<span class="keyword">int</span>)(values[<span class="number">2</span>]+rectTemp.width()*values[<span class="number">0</span>]);  </div><div class="line">                lastPoint.x = curPoint.x;</div><div class="line">                lastPoint.y = curPoint.y;</div><div class="line">                curPoint.x = event.getX();</div><div class="line">                curPoint.y = event.getY();</div><div class="line">                <span class="keyword">if</span>(leftPos &lt; <span class="number">0</span> &amp;&amp; curPoint.x &gt; lastPoint.x || rightPos &gt; viewWidth &amp;&amp; curPoint.x &lt; lastPoint.x)</div><div class="line">                &#123;<span class="comment">// 图片左边未显示完全时禁止向右划，向左划同理</span></div><div class="line">                    <span class="keyword">this</span>.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">this</span>.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<p>已同步至git。</p>
]]></content>
    </entry>
    
  
  
</search>
